/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Gel_BioInf_Models;  
@SuppressWarnings("all")
/** Family history for secondary findings
Arrays of strings describing discrete family history phenotypes */
@org.apache.avro.specific.AvroGenerated
public class OtherFamilyHistory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OtherFamilyHistory\",\"namespace\":\"Gel_BioInf_Models\",\"doc\":\"Family history for secondary findings\\nArrays of strings describing discrete family history phenotypes\",\"fields\":[{\"name\":\"maternalFamilyHistory\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Relevant Maternal family history\"},{\"name\":\"paternalFamilyHistory\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Relevant Maternal family history\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Relevant Maternal family history */
   public java.util.List<java.lang.String> maternalFamilyHistory;
  /** Relevant Maternal family history */
   public java.util.List<java.lang.String> paternalFamilyHistory;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public OtherFamilyHistory() {}

  /**
   * All-args constructor.
   */
  public OtherFamilyHistory(java.util.List<java.lang.String> maternalFamilyHistory, java.util.List<java.lang.String> paternalFamilyHistory) {
    this.maternalFamilyHistory = maternalFamilyHistory;
    this.paternalFamilyHistory = paternalFamilyHistory;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return maternalFamilyHistory;
    case 1: return paternalFamilyHistory;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: maternalFamilyHistory = (java.util.List<java.lang.String>)value$; break;
    case 1: paternalFamilyHistory = (java.util.List<java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'maternalFamilyHistory' field.
   * Relevant Maternal family history   */
  public java.util.List<java.lang.String> getMaternalFamilyHistory() {
    return maternalFamilyHistory;
  }

  /**
   * Sets the value of the 'maternalFamilyHistory' field.
   * Relevant Maternal family history   * @param value the value to set.
   */
  public void setMaternalFamilyHistory(java.util.List<java.lang.String> value) {
    this.maternalFamilyHistory = value;
  }

  /**
   * Gets the value of the 'paternalFamilyHistory' field.
   * Relevant Maternal family history   */
  public java.util.List<java.lang.String> getPaternalFamilyHistory() {
    return paternalFamilyHistory;
  }

  /**
   * Sets the value of the 'paternalFamilyHistory' field.
   * Relevant Maternal family history   * @param value the value to set.
   */
  public void setPaternalFamilyHistory(java.util.List<java.lang.String> value) {
    this.paternalFamilyHistory = value;
  }

  /** Creates a new OtherFamilyHistory RecordBuilder */
  public static Gel_BioInf_Models.OtherFamilyHistory.Builder newBuilder() {
    return new Gel_BioInf_Models.OtherFamilyHistory.Builder();
  }
  
  /** Creates a new OtherFamilyHistory RecordBuilder by copying an existing Builder */
  public static Gel_BioInf_Models.OtherFamilyHistory.Builder newBuilder(Gel_BioInf_Models.OtherFamilyHistory.Builder other) {
    return new Gel_BioInf_Models.OtherFamilyHistory.Builder(other);
  }
  
  /** Creates a new OtherFamilyHistory RecordBuilder by copying an existing OtherFamilyHistory instance */
  public static Gel_BioInf_Models.OtherFamilyHistory.Builder newBuilder(Gel_BioInf_Models.OtherFamilyHistory other) {
    return new Gel_BioInf_Models.OtherFamilyHistory.Builder(other);
  }
  
  /**
   * RecordBuilder for OtherFamilyHistory instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OtherFamilyHistory>
    implements org.apache.avro.data.RecordBuilder<OtherFamilyHistory> {

    private java.util.List<java.lang.String> maternalFamilyHistory;
    private java.util.List<java.lang.String> paternalFamilyHistory;

    /** Creates a new Builder */
    private Builder() {
      super(Gel_BioInf_Models.OtherFamilyHistory.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Gel_BioInf_Models.OtherFamilyHistory.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.maternalFamilyHistory)) {
        this.maternalFamilyHistory = data().deepCopy(fields()[0].schema(), other.maternalFamilyHistory);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paternalFamilyHistory)) {
        this.paternalFamilyHistory = data().deepCopy(fields()[1].schema(), other.paternalFamilyHistory);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing OtherFamilyHistory instance */
    private Builder(Gel_BioInf_Models.OtherFamilyHistory other) {
            super(Gel_BioInf_Models.OtherFamilyHistory.SCHEMA$);
      if (isValidValue(fields()[0], other.maternalFamilyHistory)) {
        this.maternalFamilyHistory = data().deepCopy(fields()[0].schema(), other.maternalFamilyHistory);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.paternalFamilyHistory)) {
        this.paternalFamilyHistory = data().deepCopy(fields()[1].schema(), other.paternalFamilyHistory);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'maternalFamilyHistory' field */
    public java.util.List<java.lang.String> getMaternalFamilyHistory() {
      return maternalFamilyHistory;
    }
    
    /** Sets the value of the 'maternalFamilyHistory' field */
    public Gel_BioInf_Models.OtherFamilyHistory.Builder setMaternalFamilyHistory(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.maternalFamilyHistory = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'maternalFamilyHistory' field has been set */
    public boolean hasMaternalFamilyHistory() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'maternalFamilyHistory' field */
    public Gel_BioInf_Models.OtherFamilyHistory.Builder clearMaternalFamilyHistory() {
      maternalFamilyHistory = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'paternalFamilyHistory' field */
    public java.util.List<java.lang.String> getPaternalFamilyHistory() {
      return paternalFamilyHistory;
    }
    
    /** Sets the value of the 'paternalFamilyHistory' field */
    public Gel_BioInf_Models.OtherFamilyHistory.Builder setPaternalFamilyHistory(java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.paternalFamilyHistory = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'paternalFamilyHistory' field has been set */
    public boolean hasPaternalFamilyHistory() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'paternalFamilyHistory' field */
    public Gel_BioInf_Models.OtherFamilyHistory.Builder clearPaternalFamilyHistory() {
      paternalFamilyHistory = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public OtherFamilyHistory build() {
      try {
        OtherFamilyHistory record = new OtherFamilyHistory();
        record.maternalFamilyHistory = fieldSetFlags()[0] ? this.maternalFamilyHistory : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.paternalFamilyHistory = fieldSetFlags()[1] ? this.paternalFamilyHistory : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
