/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Gel_BioInf_Models;  
@SuppressWarnings("all")
/** This record defines a gene panel. */
@org.apache.avro.specific.AvroGenerated
public class VirtualPanel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VirtualPanel\",\"namespace\":\"Gel_BioInf_Models\",\"doc\":\"This record defines a gene panel.\",\"fields\":[{\"name\":\"specificDiseaseTitle\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the Specific Disease\"},{\"name\":\"panelVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version of the Gene Panel\"},{\"name\":\"ensemblVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Ensembl version used to get teh genes or transcripts\"},{\"name\":\"dataModelCatalogueVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version of the Data Catalogue against which the information is being provided\\n    The data catalogue version should internally keep track of the version for the HPO ontology\"},{\"name\":\"geneIds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"gene id from ensembl (version as per annotation file)\"},{\"name\":\"Transcripts\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"transcript ids from ensembl\"},{\"name\":\"relevantRegions\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"File\",\"doc\":\"This defines a file\\nThis Record is defined by the sampleID and a URI\\nCurrently SampleID can be a single String or an array of strings if multiple samples are associated with the same file\",\"fields\":[{\"name\":\"SampleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"},{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Unique ID(s) of the Sample, for example in a multisample vcf this would have an array of all the smaple ids\"},{\"name\":\"URIFile\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"URI PATH\"}]}],\"doc\":\"BED format file\"},{\"name\":\"clinicalRelevantVariants\",\"type\":[\"null\",\"File\"],\"doc\":\"VCF File\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Name of the Specific Disease */
   public java.lang.String specificDiseaseTitle;
  /** Version of the Gene Panel */
   public java.lang.String panelVersion;
  /** Ensembl version used to get teh genes or transcripts */
   public java.lang.String ensemblVersion;
  /** Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology */
   public java.lang.String dataModelCatalogueVersion;
  /** gene id from ensembl (version as per annotation file) */
   public java.util.List<java.lang.String> geneIds;
  /** transcript ids from ensembl */
   public java.util.List<java.lang.String> Transcripts;
  /** BED format file */
   public Gel_BioInf_Models.File relevantRegions;
  /** VCF File */
   public Gel_BioInf_Models.File clinicalRelevantVariants;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VirtualPanel() {}

  /**
   * All-args constructor.
   */
  public VirtualPanel(java.lang.String specificDiseaseTitle, java.lang.String panelVersion, java.lang.String ensemblVersion, java.lang.String dataModelCatalogueVersion, java.util.List<java.lang.String> geneIds, java.util.List<java.lang.String> Transcripts, Gel_BioInf_Models.File relevantRegions, Gel_BioInf_Models.File clinicalRelevantVariants) {
    this.specificDiseaseTitle = specificDiseaseTitle;
    this.panelVersion = panelVersion;
    this.ensemblVersion = ensemblVersion;
    this.dataModelCatalogueVersion = dataModelCatalogueVersion;
    this.geneIds = geneIds;
    this.Transcripts = Transcripts;
    this.relevantRegions = relevantRegions;
    this.clinicalRelevantVariants = clinicalRelevantVariants;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return specificDiseaseTitle;
    case 1: return panelVersion;
    case 2: return ensemblVersion;
    case 3: return dataModelCatalogueVersion;
    case 4: return geneIds;
    case 5: return Transcripts;
    case 6: return relevantRegions;
    case 7: return clinicalRelevantVariants;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: specificDiseaseTitle = (java.lang.String)value$; break;
    case 1: panelVersion = (java.lang.String)value$; break;
    case 2: ensemblVersion = (java.lang.String)value$; break;
    case 3: dataModelCatalogueVersion = (java.lang.String)value$; break;
    case 4: geneIds = (java.util.List<java.lang.String>)value$; break;
    case 5: Transcripts = (java.util.List<java.lang.String>)value$; break;
    case 6: relevantRegions = (Gel_BioInf_Models.File)value$; break;
    case 7: clinicalRelevantVariants = (Gel_BioInf_Models.File)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'specificDiseaseTitle' field.
   * Name of the Specific Disease   */
  public java.lang.String getSpecificDiseaseTitle() {
    return specificDiseaseTitle;
  }

  /**
   * Sets the value of the 'specificDiseaseTitle' field.
   * Name of the Specific Disease   * @param value the value to set.
   */
  public void setSpecificDiseaseTitle(java.lang.String value) {
    this.specificDiseaseTitle = value;
  }

  /**
   * Gets the value of the 'panelVersion' field.
   * Version of the Gene Panel   */
  public java.lang.String getPanelVersion() {
    return panelVersion;
  }

  /**
   * Sets the value of the 'panelVersion' field.
   * Version of the Gene Panel   * @param value the value to set.
   */
  public void setPanelVersion(java.lang.String value) {
    this.panelVersion = value;
  }

  /**
   * Gets the value of the 'ensemblVersion' field.
   * Ensembl version used to get teh genes or transcripts   */
  public java.lang.String getEnsemblVersion() {
    return ensemblVersion;
  }

  /**
   * Sets the value of the 'ensemblVersion' field.
   * Ensembl version used to get teh genes or transcripts   * @param value the value to set.
   */
  public void setEnsemblVersion(java.lang.String value) {
    this.ensemblVersion = value;
  }

  /**
   * Gets the value of the 'dataModelCatalogueVersion' field.
   * Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology   */
  public java.lang.String getDataModelCatalogueVersion() {
    return dataModelCatalogueVersion;
  }

  /**
   * Sets the value of the 'dataModelCatalogueVersion' field.
   * Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology   * @param value the value to set.
   */
  public void setDataModelCatalogueVersion(java.lang.String value) {
    this.dataModelCatalogueVersion = value;
  }

  /**
   * Gets the value of the 'geneIds' field.
   * gene id from ensembl (version as per annotation file)   */
  public java.util.List<java.lang.String> getGeneIds() {
    return geneIds;
  }

  /**
   * Sets the value of the 'geneIds' field.
   * gene id from ensembl (version as per annotation file)   * @param value the value to set.
   */
  public void setGeneIds(java.util.List<java.lang.String> value) {
    this.geneIds = value;
  }

  /**
   * Gets the value of the 'Transcripts' field.
   * transcript ids from ensembl   */
  public java.util.List<java.lang.String> getTranscripts() {
    return Transcripts;
  }

  /**
   * Sets the value of the 'Transcripts' field.
   * transcript ids from ensembl   * @param value the value to set.
   */
  public void setTranscripts(java.util.List<java.lang.String> value) {
    this.Transcripts = value;
  }

  /**
   * Gets the value of the 'relevantRegions' field.
   * BED format file   */
  public Gel_BioInf_Models.File getRelevantRegions() {
    return relevantRegions;
  }

  /**
   * Sets the value of the 'relevantRegions' field.
   * BED format file   * @param value the value to set.
   */
  public void setRelevantRegions(Gel_BioInf_Models.File value) {
    this.relevantRegions = value;
  }

  /**
   * Gets the value of the 'clinicalRelevantVariants' field.
   * VCF File   */
  public Gel_BioInf_Models.File getClinicalRelevantVariants() {
    return clinicalRelevantVariants;
  }

  /**
   * Sets the value of the 'clinicalRelevantVariants' field.
   * VCF File   * @param value the value to set.
   */
  public void setClinicalRelevantVariants(Gel_BioInf_Models.File value) {
    this.clinicalRelevantVariants = value;
  }

  /** Creates a new VirtualPanel RecordBuilder */
  public static Gel_BioInf_Models.VirtualPanel.Builder newBuilder() {
    return new Gel_BioInf_Models.VirtualPanel.Builder();
  }
  
  /** Creates a new VirtualPanel RecordBuilder by copying an existing Builder */
  public static Gel_BioInf_Models.VirtualPanel.Builder newBuilder(Gel_BioInf_Models.VirtualPanel.Builder other) {
    return new Gel_BioInf_Models.VirtualPanel.Builder(other);
  }
  
  /** Creates a new VirtualPanel RecordBuilder by copying an existing VirtualPanel instance */
  public static Gel_BioInf_Models.VirtualPanel.Builder newBuilder(Gel_BioInf_Models.VirtualPanel other) {
    return new Gel_BioInf_Models.VirtualPanel.Builder(other);
  }
  
  /**
   * RecordBuilder for VirtualPanel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VirtualPanel>
    implements org.apache.avro.data.RecordBuilder<VirtualPanel> {

    private java.lang.String specificDiseaseTitle;
    private java.lang.String panelVersion;
    private java.lang.String ensemblVersion;
    private java.lang.String dataModelCatalogueVersion;
    private java.util.List<java.lang.String> geneIds;
    private java.util.List<java.lang.String> Transcripts;
    private Gel_BioInf_Models.File relevantRegions;
    private Gel_BioInf_Models.File clinicalRelevantVariants;

    /** Creates a new Builder */
    private Builder() {
      super(Gel_BioInf_Models.VirtualPanel.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Gel_BioInf_Models.VirtualPanel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.specificDiseaseTitle)) {
        this.specificDiseaseTitle = data().deepCopy(fields()[0].schema(), other.specificDiseaseTitle);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.panelVersion)) {
        this.panelVersion = data().deepCopy(fields()[1].schema(), other.panelVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ensemblVersion)) {
        this.ensemblVersion = data().deepCopy(fields()[2].schema(), other.ensemblVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataModelCatalogueVersion)) {
        this.dataModelCatalogueVersion = data().deepCopy(fields()[3].schema(), other.dataModelCatalogueVersion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.geneIds)) {
        this.geneIds = data().deepCopy(fields()[4].schema(), other.geneIds);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Transcripts)) {
        this.Transcripts = data().deepCopy(fields()[5].schema(), other.Transcripts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.relevantRegions)) {
        this.relevantRegions = data().deepCopy(fields()[6].schema(), other.relevantRegions);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clinicalRelevantVariants)) {
        this.clinicalRelevantVariants = data().deepCopy(fields()[7].schema(), other.clinicalRelevantVariants);
        fieldSetFlags()[7] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VirtualPanel instance */
    private Builder(Gel_BioInf_Models.VirtualPanel other) {
            super(Gel_BioInf_Models.VirtualPanel.SCHEMA$);
      if (isValidValue(fields()[0], other.specificDiseaseTitle)) {
        this.specificDiseaseTitle = data().deepCopy(fields()[0].schema(), other.specificDiseaseTitle);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.panelVersion)) {
        this.panelVersion = data().deepCopy(fields()[1].schema(), other.panelVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ensemblVersion)) {
        this.ensemblVersion = data().deepCopy(fields()[2].schema(), other.ensemblVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataModelCatalogueVersion)) {
        this.dataModelCatalogueVersion = data().deepCopy(fields()[3].schema(), other.dataModelCatalogueVersion);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.geneIds)) {
        this.geneIds = data().deepCopy(fields()[4].schema(), other.geneIds);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Transcripts)) {
        this.Transcripts = data().deepCopy(fields()[5].schema(), other.Transcripts);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.relevantRegions)) {
        this.relevantRegions = data().deepCopy(fields()[6].schema(), other.relevantRegions);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.clinicalRelevantVariants)) {
        this.clinicalRelevantVariants = data().deepCopy(fields()[7].schema(), other.clinicalRelevantVariants);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'specificDiseaseTitle' field */
    public java.lang.String getSpecificDiseaseTitle() {
      return specificDiseaseTitle;
    }
    
    /** Sets the value of the 'specificDiseaseTitle' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setSpecificDiseaseTitle(java.lang.String value) {
      validate(fields()[0], value);
      this.specificDiseaseTitle = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'specificDiseaseTitle' field has been set */
    public boolean hasSpecificDiseaseTitle() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'specificDiseaseTitle' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearSpecificDiseaseTitle() {
      specificDiseaseTitle = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'panelVersion' field */
    public java.lang.String getPanelVersion() {
      return panelVersion;
    }
    
    /** Sets the value of the 'panelVersion' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setPanelVersion(java.lang.String value) {
      validate(fields()[1], value);
      this.panelVersion = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'panelVersion' field has been set */
    public boolean hasPanelVersion() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'panelVersion' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearPanelVersion() {
      panelVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ensemblVersion' field */
    public java.lang.String getEnsemblVersion() {
      return ensemblVersion;
    }
    
    /** Sets the value of the 'ensemblVersion' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setEnsemblVersion(java.lang.String value) {
      validate(fields()[2], value);
      this.ensemblVersion = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ensemblVersion' field has been set */
    public boolean hasEnsemblVersion() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ensemblVersion' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearEnsemblVersion() {
      ensemblVersion = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'dataModelCatalogueVersion' field */
    public java.lang.String getDataModelCatalogueVersion() {
      return dataModelCatalogueVersion;
    }
    
    /** Sets the value of the 'dataModelCatalogueVersion' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setDataModelCatalogueVersion(java.lang.String value) {
      validate(fields()[3], value);
      this.dataModelCatalogueVersion = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'dataModelCatalogueVersion' field has been set */
    public boolean hasDataModelCatalogueVersion() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'dataModelCatalogueVersion' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearDataModelCatalogueVersion() {
      dataModelCatalogueVersion = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'geneIds' field */
    public java.util.List<java.lang.String> getGeneIds() {
      return geneIds;
    }
    
    /** Sets the value of the 'geneIds' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setGeneIds(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.geneIds = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'geneIds' field has been set */
    public boolean hasGeneIds() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'geneIds' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearGeneIds() {
      geneIds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'Transcripts' field */
    public java.util.List<java.lang.String> getTranscripts() {
      return Transcripts;
    }
    
    /** Sets the value of the 'Transcripts' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setTranscripts(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.Transcripts = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'Transcripts' field has been set */
    public boolean hasTranscripts() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'Transcripts' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearTranscripts() {
      Transcripts = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'relevantRegions' field */
    public Gel_BioInf_Models.File getRelevantRegions() {
      return relevantRegions;
    }
    
    /** Sets the value of the 'relevantRegions' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setRelevantRegions(Gel_BioInf_Models.File value) {
      validate(fields()[6], value);
      this.relevantRegions = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'relevantRegions' field has been set */
    public boolean hasRelevantRegions() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'relevantRegions' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearRelevantRegions() {
      relevantRegions = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'clinicalRelevantVariants' field */
    public Gel_BioInf_Models.File getClinicalRelevantVariants() {
      return clinicalRelevantVariants;
    }
    
    /** Sets the value of the 'clinicalRelevantVariants' field */
    public Gel_BioInf_Models.VirtualPanel.Builder setClinicalRelevantVariants(Gel_BioInf_Models.File value) {
      validate(fields()[7], value);
      this.clinicalRelevantVariants = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'clinicalRelevantVariants' field has been set */
    public boolean hasClinicalRelevantVariants() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'clinicalRelevantVariants' field */
    public Gel_BioInf_Models.VirtualPanel.Builder clearClinicalRelevantVariants() {
      clinicalRelevantVariants = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public VirtualPanel build() {
      try {
        VirtualPanel record = new VirtualPanel();
        record.specificDiseaseTitle = fieldSetFlags()[0] ? this.specificDiseaseTitle : (java.lang.String) defaultValue(fields()[0]);
        record.panelVersion = fieldSetFlags()[1] ? this.panelVersion : (java.lang.String) defaultValue(fields()[1]);
        record.ensemblVersion = fieldSetFlags()[2] ? this.ensemblVersion : (java.lang.String) defaultValue(fields()[2]);
        record.dataModelCatalogueVersion = fieldSetFlags()[3] ? this.dataModelCatalogueVersion : (java.lang.String) defaultValue(fields()[3]);
        record.geneIds = fieldSetFlags()[4] ? this.geneIds : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        record.Transcripts = fieldSetFlags()[5] ? this.Transcripts : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        record.relevantRegions = fieldSetFlags()[6] ? this.relevantRegions : (Gel_BioInf_Models.File) defaultValue(fields()[6]);
        record.clinicalRelevantVariants = fieldSetFlags()[7] ? this.clinicalRelevantVariants : (Gel_BioInf_Models.File) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
