/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Gel_BioInf_Models;  
@SuppressWarnings("all")
/** This record represents basic information for this report */
@org.apache.avro.specific.AvroGenerated
public class InterpretationRequestRD extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InterpretationRequestRD\",\"namespace\":\"Gel_BioInf_Models\",\"doc\":\"This record represents basic information for this report\",\"fields\":[{\"name\":\"InterpretationRequestID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Unique id for this report\"},{\"name\":\"genomeAssemblyVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"This is the version of the assembly used to align the reads\",\"default\":\"GRCh37.p13\"},{\"name\":\"InterpretationRequestVersion\",\"type\":\"int\",\"doc\":\"Version of this request\"},{\"name\":\"interpretGenome\",\"type\":\"boolean\",\"doc\":\"Load data to system or also provide interpretation?\",\"default\":false},{\"name\":\"workspace\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"The genome shall be assigned to the workspaces(projects or domains with a predefined set of users) to control user access\"},{\"name\":\"BAMs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"File\",\"doc\":\"This defines a file\\nThis Record is defined by the sampleID and a URI\\nCurrently SampleID can be a single String or an array of strings if multiple samples are associated with the same file\",\"fields\":[{\"name\":\"SampleId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"},{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Unique ID(s) of the Sample, for example in a multisample vcf this would have an array of all the smaple ids\"},{\"name\":\"URIFile\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"URI PATH\"}]}},\"doc\":\"BAMs Files\"},{\"name\":\"gVCFs\",\"type\":{\"type\":\"array\",\"items\":\"File\"},\"doc\":\"gVCFs Files where SNVs and INDELs are represented\"},{\"name\":\"VCFs\",\"type\":{\"type\":\"array\",\"items\":\"File\"},\"doc\":\"VCFs Files where SVs and CNVs are represented\"},{\"name\":\"bigWigs\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"File\"}],\"doc\":\"BigWig Files\"},{\"name\":\"pedigreeDiagram\",\"type\":[\"null\",\"File\"],\"doc\":\"Pedigree Diagram Files\"},{\"name\":\"annotationFile\",\"type\":[\"null\",\"File\"],\"doc\":\"Variant Annotation using cellbase\"},{\"name\":\"pedigree\",\"type\":{\"type\":\"record\",\"name\":\"Pedigree\",\"doc\":\"This is the concept of a family with associated phenotypes as present in the record RDParticipant\",\"fields\":[{\"name\":\"gelFamilyId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Family id which internally translate to a sample set\"},{\"name\":\"participants\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RDParticipant\",\"doc\":\"This defines a RD Participant (demographics and pedigree information)\",\"fields\":[{\"name\":\"pedigreeId\",\"type\":\"int\",\"doc\":\"Numbering used to refer to each member of the pedigree\"},{\"name\":\"isProband\",\"type\":\"boolean\",\"doc\":\"If this field is true, the member should be consider the proband of this family\"},{\"name\":\"gelId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"gel internal identifier, only required when the participant belongs to the program\"},{\"name\":\"gelFamilyId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Family id which internally translate to a sample set\"},{\"name\":\"sex\",\"type\":{\"type\":\"enum\",\"name\":\"Sex\",\"doc\":\"Sex\",\"symbols\":[\"male\",\"female\",\"undetermined\"]},\"doc\":\"Sex of the Participant\"},{\"name\":\"fatherId\",\"type\":[\"null\",\"int\"],\"doc\":\"refers to the pedigreeId of the father\\n    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known\\n    about them in order to unambiguously reconstruct the pedigree.\"},{\"name\":\"motherId\",\"type\":[\"null\",\"int\"],\"doc\":\"refers to the pedigreeId of the mother\\n    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known\\n    about them in order to unambiguously reconstruct the pedigree.\"},{\"name\":\"twinGroup\",\"type\":[\"null\",\"int\"],\"doc\":\"Each twin group is numbered, i.e. all members of a group of multiparous births receive the same number\"},{\"name\":\"monozygotic\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TernaryOption\",\"doc\":\"This the define a yes/no/unknown case\",\"symbols\":[\"yes\",\"no\",\"unknown\"]}],\"doc\":\"A property of the twinning group but should be entered for all members\"},{\"name\":\"adoptedStatus\",\"type\":{\"type\":\"enum\",\"name\":\"AdoptedStatus\",\"doc\":\"adoptedin means adopted into the family\\nadoptedout means child belonged to the family and was adopted out\",\"symbols\":[\"not_adopted\",\"adoptedin\",\"adoptedout\"]},\"doc\":\"Adopted Status\"},{\"name\":\"lifeStatus\",\"type\":{\"type\":\"enum\",\"name\":\"LifeStatus\",\"doc\":\"Life Status\",\"symbols\":[\"alive\",\"aborted\",\"deceased\",\"unborn\",\"stillborn\",\"miscarriage\"]},\"doc\":\"Life Status\"},{\"name\":\"consanguineousParents\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The parents of this participant has a consanguineous relationship\"},{\"name\":\"consanguineousPopulation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Offspring from a consanguineous population\"},{\"name\":\"affectionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"AffectionStatus\",\"doc\":\"Affection Status\",\"symbols\":[\"unaffected\",\"affected\",\"unknown\"]},\"doc\":\"Affection Status\"},{\"name\":\"disorderList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Disorder\",\"doc\":\"This is quite GEL specific. This is the way is stored in ModelCatalogue and PanelApp.\\nCurrently all specific disease titles are assigned to a disease subgroup so really only specificDisease needs to be\\ncompleted but we add the others for generality\",\"fields\":[{\"name\":\"diseaseGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This is Level2 Title for this disorder\"},{\"name\":\"diseaseSubGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This is Level3 Title for this disorder\"},{\"name\":\"specificDisease\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This is Level4 Title for this disorder\"},{\"name\":\"ageOfOnset\",\"type\":[\"null\",\"int\"],\"doc\":\"Age of onset in months\"}]}},\"doc\":\"Clinical Data (disorders). If the family member is unaffected as per affectionStatus then this list is empty\"},{\"name\":\"hpoTermList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"HpoTerm\",\"doc\":\"This defines an HPO term and its modifiers (possibly multiple)\\nIf HPO term presence is unknown we don't have a entry on the list\",\"fields\":[{\"name\":\"term\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Identifier of the HPO term\"},{\"name\":\"termPresence\",\"type\":\"boolean\",\"doc\":\"This is whether the term is present in the participant (default is null=unkown) true=term is present in participant,\\n    false=term is not present\"},{\"name\":\"modifiers\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Modifier associated with the HPO term\"},{\"name\":\"ageOfOnset\",\"type\":[\"null\",\"int\"],\"doc\":\"Age of onset in months\"}]}},\"doc\":\"Clinical Data (HPO terms)\"},{\"name\":\"ancestries\",\"type\":{\"type\":\"record\",\"name\":\"Ancestries\",\"fields\":[{\"name\":\"mothersEthnicOrigin\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"EthnicCategory\",\"doc\":\"This is the list of ethnics in ONS16\\n\\n* `D`:  Mixed: White and Black Caribbean\\n* `E`:  Mixed: White and Black African\\n* `F`:  Mixed: White and Asian\\n* `G`:  Mixed: Any other mixed background\\n* `A`:  White: British\\n* `B`:  White: Irish\\n* `C`:  White: Any other White background\\n* `L`:  Asian or Asian British: Any other Asian background\\n* `M`:  Black or Black British: Caribbean\\n* `N`:  Black or Black British: African\\n* `H`:  Asian or Asian British: Indian\\n* `J`:  Asian or Asian British: Pakistani\\n* `K`:  Asian or Asian British: Bangladeshi\\n* `P`:  Black or Black British: Any other Black background\\n* `S`:  Other Ethnic Groups: Any other ethnic group\\n* `R`:  Other Ethnic Groups: Chinese\\n* `Z`:  Not stated\",\"symbols\":[\"D\",\"E\",\"F\",\"G\",\"A\",\"B\",\"C\",\"L\",\"M\",\"N\",\"H\",\"J\",\"K\",\"P\",\"S\",\"R\",\"Z\"]}],\"doc\":\"Mother's Ethnic Origin\"},{\"name\":\"mothersOtherRelevantAncestry\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Mother's Ethnic Origin Description\"},{\"name\":\"fathersEthnicOrigin\",\"type\":[\"null\",\"EthnicCategory\"],\"doc\":\"Father's Ethnic Origin\"},{\"name\":\"fathersOtherRelevantAncestry\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.stri","ng\":\"String\"}],\"doc\":\"Father's Ethnic Origin Description\"},{\"name\":\"chiSquare1KGenomesPhase3Pop\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ChiSquare1KGenomesPhase3Pop\",\"doc\":\"Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations\",\"fields\":[{\"name\":\"kGSuperPopCategory\",\"type\":{\"type\":\"enum\",\"name\":\"KGSuperPopCategory\",\"doc\":\"1K Population\",\"symbols\":[\"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\"]},\"doc\":\"1K Super Population\"},{\"name\":\"kGPopCategory\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"KGPopCategory\",\"doc\":\"1K Super Population\",\"symbols\":[\"ACB\",\"ASW\",\"BEB\",\"CDX\",\"CEU\",\"CHB\",\"CHS\",\"CLM\",\"ESN\",\"FIN\",\"GBR\",\"GIH\",\"GWD\",\"IBS\",\"ITU\",\"JPT\",\"KHV\",\"LWK\",\"MSL\",\"MXL\",\"PEL\",\"PJL\",\"PUR\",\"STU\",\"TSI\",\"YRI\"]}],\"doc\":\"1K Population\"},{\"name\":\"chiSquare\",\"type\":\"float\",\"doc\":\"Chi-square test for goodness of fit of this sample to this 1000 Genomes Phase 3 population\"}]}}],\"doc\":\"Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations\"}]},\"doc\":\"Participant's ancestries, defined as Mother's/Father's Ethnic Origin and Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations\"},{\"name\":\"dataModelCatalogueVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version of the Data Catalogue against which the information is being provided\\n    The data catalogue version should internally keep track of the version for the HPO ontology\",\"default\":\"v4.2\"},{\"name\":\"consentStatus\",\"type\":{\"type\":\"record\",\"name\":\"ConsentStatus\",\"doc\":\"Consent Status\",\"fields\":[{\"name\":\"programmeConsent\",\"type\":\"boolean\",\"doc\":\"Is this individual consented to the programme?\\n    It could simple be a family member that is not consented but for whom affection status is known\",\"default\":false},{\"name\":\"primaryFindingConsent\",\"type\":\"boolean\",\"doc\":\"Consent for feedback of primary findings?\",\"default\":false},{\"name\":\"secondaryFindingConsent\",\"type\":\"boolean\",\"doc\":\"Consent for secondary finding lookup\",\"default\":false},{\"name\":\"carrierStatusConsent\",\"type\":\"boolean\",\"doc\":\"Consent for carrier status check?\",\"default\":false}]},\"doc\":\"What has this participant consented to?\\n    A participant that has been consented to the programme should also have sequence data associated with them; however\\n    this needs to be programmatically checked\"},{\"name\":\"samples\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"This is an array containing all the samples that belong to this individual, e.g [\\\"LP00002255_GA4\\\"]\"},{\"name\":\"additionalInformation\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"We could add a map here to store additional information for example URIs to images, ECGs, etc\\n    Null by default\"}]}}}]},\"doc\":\"Pedigree of the family to analyze\"},{\"name\":\"inbreedingCoefficientEstimates\",\"type\":[\"null\",\"File\"],\"doc\":\"File containing the Inbreeding Coefficient Estimation\"},{\"name\":\"complexGeneticPhenomena\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"ComplexGeneticPhenomena\",\"symbols\":[\"mosaicism\",\"monosomy\",\"disomy\",\"uniparental_disomy\",\"trisomy\",\"other_aneuploidy\"]}],\"doc\":\"Complex Genetic Phenomena\"},{\"name\":\"modeOfInheritance\",\"type\":{\"type\":\"enum\",\"name\":\"ModeOfInheritance\",\"doc\":\"An enumeration for the different mode of inheritances:\\n\\n* `monoallelic_not_imprinted`: MONOALLELIC, autosomal or pseudoautosomal, not imprinted\\n* `monoallelic_maternally_imprinted`: MONOALLELIC, autosomal or pseudoautosomal, maternally imprinted (paternal allele expressed)\\n* `monoallelic_paternally_imprinted`: MONOALLELIC, autosomal or pseudoautosomal, paternally imprinted (maternal allele expressed)\\n* `monoallelic`: MONOALLELIC, autosomal or pseudoautosomal, imprinted status unknown\\n* `biallelic`: BIALLELIC, autosomal or pseudoautosomal\\n* `monoallelic_and_biallelic`: BOTH monoallelic and biallelic, autosomal or pseudoautosomal\\n* `monoallelic_and_more_severe_biallelic`: BOTH monoallelic and biallelic, autosomal or pseudoautosomal (but BIALLELIC mutations cause a more SEVERE disease form), autosomal or pseudoautosomal\\n* `xlinked_biallelic`: X-LINKED: hemizygous mutation in males, biallelic mutations in females\\n* `xlinked_monoallelic`: X linked: hemizygous mutation in males, monoallelic mutations in females may cause disease (may be less severe, later onset than males)\\n* `mitochondrial`: MITOCHONDRIAL\\n* `unknown`: Unknown\",\"symbols\":[\"monoallelic\",\"monoallelic_not_imprinted\",\"monoallelic_maternally_imprinted\",\"monoallelic_paternally_imprinted\",\"biallelic\",\"monoallelic_and_biallelic\",\"monoallelic_and_more_severe_biallelic\",\"xlinked_biallelic\",\"xlinked_monoallelic\",\"mitochondrial\",\"unknown\"]},\"doc\":\"Mode of inheritance to analyze the family\"},{\"name\":\"virtualPanel\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"VirtualPanel\",\"doc\":\"This record defines a gene panel.\",\"fields\":[{\"name\":\"specificDiseaseTitle\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Name of the Specific Disease\"},{\"name\":\"panelVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version of the Gene Panel\"},{\"name\":\"ensemblVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Ensembl version used to get teh genes or transcripts\"},{\"name\":\"dataModelCatalogueVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version of the Data Catalogue against which the information is being provided\\n    The data catalogue version should internally keep track of the version for the HPO ontology\"},{\"name\":\"geneIds\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"gene id from ensembl (version as per annotation file)\"},{\"name\":\"Transcripts\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"transcript ids from ensembl\"},{\"name\":\"relevantRegions\",\"type\":[\"null\",\"File\"],\"doc\":\"BED format file\"},{\"name\":\"clinicalRelevantVariants\",\"type\":[\"null\",\"File\"],\"doc\":\"VCF File\"}]}}],\"doc\":\"Virtual Panels can be defined using EnsmbleIds, Transcripts, a BED File or a VCF File\"},{\"name\":\"otherFamilyHistory\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"OtherFamilyHistory\",\"doc\":\"Family history for secondary findings\\nArrays of strings describing discrete family history phenotypes\",\"fields\":[{\"name\":\"maternalFamilyHistory\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Relevant Maternal family history\"},{\"name\":\"paternalFamilyHistory\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"Relevant Maternal family history\"}]}],\"doc\":\"This is the family history as pertinent to assessing secondary findings.\\n    It is paternal or maternal with reference to the proband.\"},{\"name\":\"analysisReturnURI\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name of the directory or endpoint where the analysed genome will be returned.\"},{\"name\":\"analysisVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"In the event that the provider has multiple versions of their system and an analysis will need to be provided against\\n    a particular version, then that version goes here.\",\"default\":\"1\"},{\"name\":\"additionalInfo\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Additional information\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique id for this report */
   public java.lang.String InterpretationRequestID;
  /** This is the version of the assembly used to align the reads */
   public java.lang.String genomeAssemblyVersion;
  /** Version of this request */
   public int InterpretationRequestVersion;
  /** Load data to system or also provide interpretation? */
   public boolean interpretGenome;
  /** The genome shall be assigned to the workspaces(projects or domains with a predefined set of users) to control user access */
   public java.util.List<java.lang.String> workspace;
  /** BAMs Files */
   public java.util.List<Gel_BioInf_Models.File> BAMs;
  /** gVCFs Files where SNVs and INDELs are represented */
   public java.util.List<Gel_BioInf_Models.File> gVCFs;
  /** VCFs Files where SVs and CNVs are represented */
   public java.util.List<Gel_BioInf_Models.File> VCFs;
  /** BigWig Files */
   public java.util.List<Gel_BioInf_Models.File> bigWigs;
  /** Pedigree Diagram Files */
   public Gel_BioInf_Models.File pedigreeDiagram;
  /** Variant Annotation using cellbase */
   public Gel_BioInf_Models.File annotationFile;
  /** Pedigree of the family to analyze */
   public Gel_BioInf_Models.Pedigree pedigree;
  /** File containing the Inbreeding Coefficient Estimation */
   public Gel_BioInf_Models.File inbreedingCoefficientEstimates;
  /** Complex Genetic Phenomena */
   public Gel_BioInf_Models.ComplexGeneticPhenomena complexGeneticPhenomena;
  /** Mode of inheritance to analyze the family */
   public Gel_BioInf_Models.ModeOfInheritance modeOfInheritance;
  /** Virtual Panels can be defined using EnsmbleIds, Transcripts, a BED File or a VCF File */
   public java.util.List<Gel_BioInf_Models.VirtualPanel> virtualPanel;
  /** This is the family history as pertinent to assessing secondary findings.
    It is paternal or maternal with reference to the proband. */
   public Gel_BioInf_Models.OtherFamilyHistory otherFamilyHistory;
  /** name of the directory or endpoint where the analysed genome will be returned. */
   public java.lang.String analysisReturnURI;
  /** In the event that the provider has multiple versions of their system and an analysis will need to be provided against
    a particular version, then that version goes here. */
   public java.lang.String analysisVersion;
  /** Additional information */
   public java.util.Map<java.lang.String,java.lang.String> additionalInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public InterpretationRequestRD() {}

  /**
   * All-args constructor.
   */
  public InterpretationRequestRD(java.lang.String InterpretationRequestID, java.lang.String genomeAssemblyVersion, java.lang.Integer InterpretationRequestVersion, java.lang.Boolean interpretGenome, java.util.List<java.lang.String> workspace, java.util.List<Gel_BioInf_Models.File> BAMs, java.util.List<Gel_BioInf_Models.File> gVCFs, java.util.List<Gel_BioInf_Models.File> VCFs, java.util.List<Gel_BioInf_Models.File> bigWigs, Gel_BioInf_Models.File pedigreeDiagram, Gel_BioInf_Models.File annotationFile, Gel_BioInf_Models.Pedigree pedigree, Gel_BioInf_Models.File inbreedingCoefficientEstimates, Gel_BioInf_Models.ComplexGeneticPhenomena complexGeneticPhenomena, Gel_BioInf_Models.ModeOfInheritance modeOfInheritance, java.util.List<Gel_BioInf_Models.VirtualPanel> virtualPanel, Gel_BioInf_Models.OtherFamilyHistory otherFamilyHistory, java.lang.String analysisReturnURI, java.lang.String analysisVersion, java.util.Map<java.lang.String,java.lang.String> additionalInfo) {
    this.InterpretationRequestID = InterpretationRequestID;
    this.genomeAssemblyVersion = genomeAssemblyVersion;
    this.InterpretationRequestVersion = InterpretationRequestVersion;
    this.interpretGenome = interpretGenome;
    this.workspace = workspace;
    this.BAMs = BAMs;
    this.gVCFs = gVCFs;
    this.VCFs = VCFs;
    this.bigWigs = bigWigs;
    this.pedigreeDiagram = pedigreeDiagram;
    this.annotationFile = annotationFile;
    this.pedigree = pedigree;
    this.inbreedingCoefficientEstimates = inbreedingCoefficientEstimates;
    this.complexGeneticPhenomena = complexGeneticPhenomena;
    this.modeOfInheritance = modeOfInheritance;
    this.virtualPanel = virtualPanel;
    this.otherFamilyHistory = otherFamilyHistory;
    this.analysisReturnURI = analysisReturnURI;
    this.analysisVersion = analysisVersion;
    this.additionalInfo = additionalInfo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return InterpretationRequestID;
    case 1: return genomeAssemblyVersion;
    case 2: return InterpretationRequestVersion;
    case 3: return interpretGenome;
    case 4: return workspace;
    case 5: return BAMs;
    case 6: return gVCFs;
    case 7: return VCFs;
    case 8: return bigWigs;
    case 9: return pedigreeDiagram;
    case 10: return annotationFile;
    case 11: return pedigree;
    case 12: return inbreedingCoefficientEstimates;
    case 13: return complexGeneticPhenomena;
    case 14: return modeOfInheritance;
    case 15: return virtualPanel;
    case 16: return otherFamilyHistory;
    case 17: return analysisReturnURI;
    case 18: return analysisVersion;
    case 19: return additionalInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: InterpretationRequestID = (java.lang.String)value$; break;
    case 1: genomeAssemblyVersion = (java.lang.String)value$; break;
    case 2: InterpretationRequestVersion = (java.lang.Integer)value$; break;
    case 3: interpretGenome = (java.lang.Boolean)value$; break;
    case 4: workspace = (java.util.List<java.lang.String>)value$; break;
    case 5: BAMs = (java.util.List<Gel_BioInf_Models.File>)value$; break;
    case 6: gVCFs = (java.util.List<Gel_BioInf_Models.File>)value$; break;
    case 7: VCFs = (java.util.List<Gel_BioInf_Models.File>)value$; break;
    case 8: bigWigs = (java.util.List<Gel_BioInf_Models.File>)value$; break;
    case 9: pedigreeDiagram = (Gel_BioInf_Models.File)value$; break;
    case 10: annotationFile = (Gel_BioInf_Models.File)value$; break;
    case 11: pedigree = (Gel_BioInf_Models.Pedigree)value$; break;
    case 12: inbreedingCoefficientEstimates = (Gel_BioInf_Models.File)value$; break;
    case 13: complexGeneticPhenomena = (Gel_BioInf_Models.ComplexGeneticPhenomena)value$; break;
    case 14: modeOfInheritance = (Gel_BioInf_Models.ModeOfInheritance)value$; break;
    case 15: virtualPanel = (java.util.List<Gel_BioInf_Models.VirtualPanel>)value$; break;
    case 16: otherFamilyHistory = (Gel_BioInf_Models.OtherFamilyHistory)value$; break;
    case 17: analysisReturnURI = (java.lang.String)value$; break;
    case 18: analysisVersion = (java.lang.String)value$; break;
    case 19: additionalInfo = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'InterpretationRequestID' field.
   * Unique id for this report   */
  public java.lang.String getInterpretationRequestID() {
    return InterpretationRequestID;
  }

  /**
   * Sets the value of the 'InterpretationRequestID' field.
   * Unique id for this report   * @param value the value to set.
   */
  public void setInterpretationRequestID(java.lang.String value) {
    this.InterpretationRequestID = value;
  }

  /**
   * Gets the value of the 'genomeAssemblyVersion' field.
   * This is the version of the assembly used to align the reads   */
  public java.lang.String getGenomeAssemblyVersion() {
    return genomeAssemblyVersion;
  }

  /**
   * Sets the value of the 'genomeAssemblyVersion' field.
   * This is the version of the assembly used to align the reads   * @param value the value to set.
   */
  public void setGenomeAssemblyVersion(java.lang.String value) {
    this.genomeAssemblyVersion = value;
  }

  /**
   * Gets the value of the 'InterpretationRequestVersion' field.
   * Version of this request   */
  public java.lang.Integer getInterpretationRequestVersion() {
    return InterpretationRequestVersion;
  }

  /**
   * Sets the value of the 'InterpretationRequestVersion' field.
   * Version of this request   * @param value the value to set.
   */
  public void setInterpretationRequestVersion(java.lang.Integer value) {
    this.InterpretationRequestVersion = value;
  }

  /**
   * Gets the value of the 'interpretGenome' field.
   * Load data to system or also provide interpretation?   */
  public java.lang.Boolean getInterpretGenome() {
    return interpretGenome;
  }

  /**
   * Sets the value of the 'interpretGenome' field.
   * Load data to system or also provide interpretation?   * @param value the value to set.
   */
  public void setInterpretGenome(java.lang.Boolean value) {
    this.interpretGenome = value;
  }

  /**
   * Gets the value of the 'workspace' field.
   * The genome shall be assigned to the workspaces(projects or domains with a predefined set of users) to control user access   */
  public java.util.List<java.lang.String> getWorkspace() {
    return workspace;
  }

  /**
   * Sets the value of the 'workspace' field.
   * The genome shall be assigned to the workspaces(projects or domains with a predefined set of users) to control user access   * @param value the value to set.
   */
  public void setWorkspace(java.util.List<java.lang.String> value) {
    this.workspace = value;
  }

  /**
   * Gets the value of the 'BAMs' field.
   * BAMs Files   */
  public java.util.List<Gel_BioInf_Models.File> getBAMs() {
    return BAMs;
  }

  /**
   * Sets the value of the 'BAMs' field.
   * BAMs Files   * @param value the value to set.
   */
  public void setBAMs(java.util.List<Gel_BioInf_Models.File> value) {
    this.BAMs = value;
  }

  /**
   * Gets the value of the 'gVCFs' field.
   * gVCFs Files where SNVs and INDELs are represented   */
  public java.util.List<Gel_BioInf_Models.File> getGVCFs() {
    return gVCFs;
  }

  /**
   * Sets the value of the 'gVCFs' field.
   * gVCFs Files where SNVs and INDELs are represented   * @param value the value to set.
   */
  public void setGVCFs(java.util.List<Gel_BioInf_Models.File> value) {
    this.gVCFs = value;
  }

  /**
   * Gets the value of the 'VCFs' field.
   * VCFs Files where SVs and CNVs are represented   */
  public java.util.List<Gel_BioInf_Models.File> getVCFs() {
    return VCFs;
  }

  /**
   * Sets the value of the 'VCFs' field.
   * VCFs Files where SVs and CNVs are represented   * @param value the value to set.
   */
  public void setVCFs(java.util.List<Gel_BioInf_Models.File> value) {
    this.VCFs = value;
  }

  /**
   * Gets the value of the 'bigWigs' field.
   * BigWig Files   */
  public java.util.List<Gel_BioInf_Models.File> getBigWigs() {
    return bigWigs;
  }

  /**
   * Sets the value of the 'bigWigs' field.
   * BigWig Files   * @param value the value to set.
   */
  public void setBigWigs(java.util.List<Gel_BioInf_Models.File> value) {
    this.bigWigs = value;
  }

  /**
   * Gets the value of the 'pedigreeDiagram' field.
   * Pedigree Diagram Files   */
  public Gel_BioInf_Models.File getPedigreeDiagram() {
    return pedigreeDiagram;
  }

  /**
   * Sets the value of the 'pedigreeDiagram' field.
   * Pedigree Diagram Files   * @param value the value to set.
   */
  public void setPedigreeDiagram(Gel_BioInf_Models.File value) {
    this.pedigreeDiagram = value;
  }

  /**
   * Gets the value of the 'annotationFile' field.
   * Variant Annotation using cellbase   */
  public Gel_BioInf_Models.File getAnnotationFile() {
    return annotationFile;
  }

  /**
   * Sets the value of the 'annotationFile' field.
   * Variant Annotation using cellbase   * @param value the value to set.
   */
  public void setAnnotationFile(Gel_BioInf_Models.File value) {
    this.annotationFile = value;
  }

  /**
   * Gets the value of the 'pedigree' field.
   * Pedigree of the family to analyze   */
  public Gel_BioInf_Models.Pedigree getPedigree() {
    return pedigree;
  }

  /**
   * Sets the value of the 'pedigree' field.
   * Pedigree of the family to analyze   * @param value the value to set.
   */
  public void setPedigree(Gel_BioInf_Models.Pedigree value) {
    this.pedigree = value;
  }

  /**
   * Gets the value of the 'inbreedingCoefficientEstimates' field.
   * File containing the Inbreeding Coefficient Estimation   */
  public Gel_BioInf_Models.File getInbreedingCoefficientEstimates() {
    return inbreedingCoefficientEstimates;
  }

  /**
   * Sets the value of the 'inbreedingCoefficientEstimates' field.
   * File containing the Inbreeding Coefficient Estimation   * @param value the value to set.
   */
  public void setInbreedingCoefficientEstimates(Gel_BioInf_Models.File value) {
    this.inbreedingCoefficientEstimates = value;
  }

  /**
   * Gets the value of the 'complexGeneticPhenomena' field.
   * Complex Genetic Phenomena   */
  public Gel_BioInf_Models.ComplexGeneticPhenomena getComplexGeneticPhenomena() {
    return complexGeneticPhenomena;
  }

  /**
   * Sets the value of the 'complexGeneticPhenomena' field.
   * Complex Genetic Phenomena   * @param value the value to set.
   */
  public void setComplexGeneticPhenomena(Gel_BioInf_Models.ComplexGeneticPhenomena value) {
    this.complexGeneticPhenomena = value;
  }

  /**
   * Gets the value of the 'modeOfInheritance' field.
   * Mode of inheritance to analyze the family   */
  public Gel_BioInf_Models.ModeOfInheritance getModeOfInheritance() {
    return modeOfInheritance;
  }

  /**
   * Sets the value of the 'modeOfInheritance' field.
   * Mode of inheritance to analyze the family   * @param value the value to set.
   */
  public void setModeOfInheritance(Gel_BioInf_Models.ModeOfInheritance value) {
    this.modeOfInheritance = value;
  }

  /**
   * Gets the value of the 'virtualPanel' field.
   * Virtual Panels can be defined using EnsmbleIds, Transcripts, a BED File or a VCF File   */
  public java.util.List<Gel_BioInf_Models.VirtualPanel> getVirtualPanel() {
    return virtualPanel;
  }

  /**
   * Sets the value of the 'virtualPanel' field.
   * Virtual Panels can be defined using EnsmbleIds, Transcripts, a BED File or a VCF File   * @param value the value to set.
   */
  public void setVirtualPanel(java.util.List<Gel_BioInf_Models.VirtualPanel> value) {
    this.virtualPanel = value;
  }

  /**
   * Gets the value of the 'otherFamilyHistory' field.
   * This is the family history as pertinent to assessing secondary findings.
    It is paternal or maternal with reference to the proband.   */
  public Gel_BioInf_Models.OtherFamilyHistory getOtherFamilyHistory() {
    return otherFamilyHistory;
  }

  /**
   * Sets the value of the 'otherFamilyHistory' field.
   * This is the family history as pertinent to assessing secondary findings.
    It is paternal or maternal with reference to the proband.   * @param value the value to set.
   */
  public void setOtherFamilyHistory(Gel_BioInf_Models.OtherFamilyHistory value) {
    this.otherFamilyHistory = value;
  }

  /**
   * Gets the value of the 'analysisReturnURI' field.
   * name of the directory or endpoint where the analysed genome will be returned.   */
  public java.lang.String getAnalysisReturnURI() {
    return analysisReturnURI;
  }

  /**
   * Sets the value of the 'analysisReturnURI' field.
   * name of the directory or endpoint where the analysed genome will be returned.   * @param value the value to set.
   */
  public void setAnalysisReturnURI(java.lang.String value) {
    this.analysisReturnURI = value;
  }

  /**
   * Gets the value of the 'analysisVersion' field.
   * In the event that the provider has multiple versions of their system and an analysis will need to be provided against
    a particular version, then that version goes here.   */
  public java.lang.String getAnalysisVersion() {
    return analysisVersion;
  }

  /**
   * Sets the value of the 'analysisVersion' field.
   * In the event that the provider has multiple versions of their system and an analysis will need to be provided against
    a particular version, then that version goes here.   * @param value the value to set.
   */
  public void setAnalysisVersion(java.lang.String value) {
    this.analysisVersion = value;
  }

  /**
   * Gets the value of the 'additionalInfo' field.
   * Additional information   */
  public java.util.Map<java.lang.String,java.lang.String> getAdditionalInfo() {
    return additionalInfo;
  }

  /**
   * Sets the value of the 'additionalInfo' field.
   * Additional information   * @param value the value to set.
   */
  public void setAdditionalInfo(java.util.Map<java.lang.String,java.lang.String> value) {
    this.additionalInfo = value;
  }

  /** Creates a new InterpretationRequestRD RecordBuilder */
  public static Gel_BioInf_Models.InterpretationRequestRD.Builder newBuilder() {
    return new Gel_BioInf_Models.InterpretationRequestRD.Builder();
  }
  
  /** Creates a new InterpretationRequestRD RecordBuilder by copying an existing Builder */
  public static Gel_BioInf_Models.InterpretationRequestRD.Builder newBuilder(Gel_BioInf_Models.InterpretationRequestRD.Builder other) {
    return new Gel_BioInf_Models.InterpretationRequestRD.Builder(other);
  }
  
  /** Creates a new InterpretationRequestRD RecordBuilder by copying an existing InterpretationRequestRD instance */
  public static Gel_BioInf_Models.InterpretationRequestRD.Builder newBuilder(Gel_BioInf_Models.InterpretationRequestRD other) {
    return new Gel_BioInf_Models.InterpretationRequestRD.Builder(other);
  }
  
  /**
   * RecordBuilder for InterpretationRequestRD instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InterpretationRequestRD>
    implements org.apache.avro.data.RecordBuilder<InterpretationRequestRD> {

    private java.lang.String InterpretationRequestID;
    private java.lang.String genomeAssemblyVersion;
    private int InterpretationRequestVersion;
    private boolean interpretGenome;
    private java.util.List<java.lang.String> workspace;
    private java.util.List<Gel_BioInf_Models.File> BAMs;
    private java.util.List<Gel_BioInf_Models.File> gVCFs;
    private java.util.List<Gel_BioInf_Models.File> VCFs;
    private java.util.List<Gel_BioInf_Models.File> bigWigs;
    private Gel_BioInf_Models.File pedigreeDiagram;
    private Gel_BioInf_Models.File annotationFile;
    private Gel_BioInf_Models.Pedigree pedigree;
    private Gel_BioInf_Models.File inbreedingCoefficientEstimates;
    private Gel_BioInf_Models.ComplexGeneticPhenomena complexGeneticPhenomena;
    private Gel_BioInf_Models.ModeOfInheritance modeOfInheritance;
    private java.util.List<Gel_BioInf_Models.VirtualPanel> virtualPanel;
    private Gel_BioInf_Models.OtherFamilyHistory otherFamilyHistory;
    private java.lang.String analysisReturnURI;
    private java.lang.String analysisVersion;
    private java.util.Map<java.lang.String,java.lang.String> additionalInfo;

    /** Creates a new Builder */
    private Builder() {
      super(Gel_BioInf_Models.InterpretationRequestRD.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Gel_BioInf_Models.InterpretationRequestRD.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.InterpretationRequestID)) {
        this.InterpretationRequestID = data().deepCopy(fields()[0].schema(), other.InterpretationRequestID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.genomeAssemblyVersion)) {
        this.genomeAssemblyVersion = data().deepCopy(fields()[1].schema(), other.genomeAssemblyVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.InterpretationRequestVersion)) {
        this.InterpretationRequestVersion = data().deepCopy(fields()[2].schema(), other.InterpretationRequestVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.interpretGenome)) {
        this.interpretGenome = data().deepCopy(fields()[3].schema(), other.interpretGenome);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.workspace)) {
        this.workspace = data().deepCopy(fields()[4].schema(), other.workspace);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.BAMs)) {
        this.BAMs = data().deepCopy(fields()[5].schema(), other.BAMs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gVCFs)) {
        this.gVCFs = data().deepCopy(fields()[6].schema(), other.gVCFs);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.VCFs)) {
        this.VCFs = data().deepCopy(fields()[7].schema(), other.VCFs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bigWigs)) {
        this.bigWigs = data().deepCopy(fields()[8].schema(), other.bigWigs);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pedigreeDiagram)) {
        this.pedigreeDiagram = data().deepCopy(fields()[9].schema(), other.pedigreeDiagram);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.annotationFile)) {
        this.annotationFile = data().deepCopy(fields()[10].schema(), other.annotationFile);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.pedigree)) {
        this.pedigree = data().deepCopy(fields()[11].schema(), other.pedigree);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.inbreedingCoefficientEstimates)) {
        this.inbreedingCoefficientEstimates = data().deepCopy(fields()[12].schema(), other.inbreedingCoefficientEstimates);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.complexGeneticPhenomena)) {
        this.complexGeneticPhenomena = data().deepCopy(fields()[13].schema(), other.complexGeneticPhenomena);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.modeOfInheritance)) {
        this.modeOfInheritance = data().deepCopy(fields()[14].schema(), other.modeOfInheritance);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.virtualPanel)) {
        this.virtualPanel = data().deepCopy(fields()[15].schema(), other.virtualPanel);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.otherFamilyHistory)) {
        this.otherFamilyHistory = data().deepCopy(fields()[16].schema(), other.otherFamilyHistory);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.analysisReturnURI)) {
        this.analysisReturnURI = data().deepCopy(fields()[17].schema(), other.analysisReturnURI);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.analysisVersion)) {
        this.analysisVersion = data().deepCopy(fields()[18].schema(), other.analysisVersion);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.additionalInfo)) {
        this.additionalInfo = data().deepCopy(fields()[19].schema(), other.additionalInfo);
        fieldSetFlags()[19] = true;
      }
    }
    
    /** Creates a Builder by copying an existing InterpretationRequestRD instance */
    private Builder(Gel_BioInf_Models.InterpretationRequestRD other) {
            super(Gel_BioInf_Models.InterpretationRequestRD.SCHEMA$);
      if (isValidValue(fields()[0], other.InterpretationRequestID)) {
        this.InterpretationRequestID = data().deepCopy(fields()[0].schema(), other.InterpretationRequestID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.genomeAssemblyVersion)) {
        this.genomeAssemblyVersion = data().deepCopy(fields()[1].schema(), other.genomeAssemblyVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.InterpretationRequestVersion)) {
        this.InterpretationRequestVersion = data().deepCopy(fields()[2].schema(), other.InterpretationRequestVersion);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.interpretGenome)) {
        this.interpretGenome = data().deepCopy(fields()[3].schema(), other.interpretGenome);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.workspace)) {
        this.workspace = data().deepCopy(fields()[4].schema(), other.workspace);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.BAMs)) {
        this.BAMs = data().deepCopy(fields()[5].schema(), other.BAMs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gVCFs)) {
        this.gVCFs = data().deepCopy(fields()[6].schema(), other.gVCFs);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.VCFs)) {
        this.VCFs = data().deepCopy(fields()[7].schema(), other.VCFs);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bigWigs)) {
        this.bigWigs = data().deepCopy(fields()[8].schema(), other.bigWigs);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.pedigreeDiagram)) {
        this.pedigreeDiagram = data().deepCopy(fields()[9].schema(), other.pedigreeDiagram);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.annotationFile)) {
        this.annotationFile = data().deepCopy(fields()[10].schema(), other.annotationFile);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.pedigree)) {
        this.pedigree = data().deepCopy(fields()[11].schema(), other.pedigree);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.inbreedingCoefficientEstimates)) {
        this.inbreedingCoefficientEstimates = data().deepCopy(fields()[12].schema(), other.inbreedingCoefficientEstimates);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.complexGeneticPhenomena)) {
        this.complexGeneticPhenomena = data().deepCopy(fields()[13].schema(), other.complexGeneticPhenomena);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.modeOfInheritance)) {
        this.modeOfInheritance = data().deepCopy(fields()[14].schema(), other.modeOfInheritance);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.virtualPanel)) {
        this.virtualPanel = data().deepCopy(fields()[15].schema(), other.virtualPanel);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.otherFamilyHistory)) {
        this.otherFamilyHistory = data().deepCopy(fields()[16].schema(), other.otherFamilyHistory);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.analysisReturnURI)) {
        this.analysisReturnURI = data().deepCopy(fields()[17].schema(), other.analysisReturnURI);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.analysisVersion)) {
        this.analysisVersion = data().deepCopy(fields()[18].schema(), other.analysisVersion);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.additionalInfo)) {
        this.additionalInfo = data().deepCopy(fields()[19].schema(), other.additionalInfo);
        fieldSetFlags()[19] = true;
      }
    }

    /** Gets the value of the 'InterpretationRequestID' field */
    public java.lang.String getInterpretationRequestID() {
      return InterpretationRequestID;
    }
    
    /** Sets the value of the 'InterpretationRequestID' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setInterpretationRequestID(java.lang.String value) {
      validate(fields()[0], value);
      this.InterpretationRequestID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'InterpretationRequestID' field has been set */
    public boolean hasInterpretationRequestID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'InterpretationRequestID' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearInterpretationRequestID() {
      InterpretationRequestID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'genomeAssemblyVersion' field */
    public java.lang.String getGenomeAssemblyVersion() {
      return genomeAssemblyVersion;
    }
    
    /** Sets the value of the 'genomeAssemblyVersion' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setGenomeAssemblyVersion(java.lang.String value) {
      validate(fields()[1], value);
      this.genomeAssemblyVersion = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'genomeAssemblyVersion' field has been set */
    public boolean hasGenomeAssemblyVersion() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'genomeAssemblyVersion' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearGenomeAssemblyVersion() {
      genomeAssemblyVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'InterpretationRequestVersion' field */
    public java.lang.Integer getInterpretationRequestVersion() {
      return InterpretationRequestVersion;
    }
    
    /** Sets the value of the 'InterpretationRequestVersion' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setInterpretationRequestVersion(int value) {
      validate(fields()[2], value);
      this.InterpretationRequestVersion = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'InterpretationRequestVersion' field has been set */
    public boolean hasInterpretationRequestVersion() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'InterpretationRequestVersion' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearInterpretationRequestVersion() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'interpretGenome' field */
    public java.lang.Boolean getInterpretGenome() {
      return interpretGenome;
    }
    
    /** Sets the value of the 'interpretGenome' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setInterpretGenome(boolean value) {
      validate(fields()[3], value);
      this.interpretGenome = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'interpretGenome' field has been set */
    public boolean hasInterpretGenome() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'interpretGenome' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearInterpretGenome() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'workspace' field */
    public java.util.List<java.lang.String> getWorkspace() {
      return workspace;
    }
    
    /** Sets the value of the 'workspace' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setWorkspace(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.workspace = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'workspace' field has been set */
    public boolean hasWorkspace() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'workspace' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearWorkspace() {
      workspace = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'BAMs' field */
    public java.util.List<Gel_BioInf_Models.File> getBAMs() {
      return BAMs;
    }
    
    /** Sets the value of the 'BAMs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setBAMs(java.util.List<Gel_BioInf_Models.File> value) {
      validate(fields()[5], value);
      this.BAMs = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'BAMs' field has been set */
    public boolean hasBAMs() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'BAMs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearBAMs() {
      BAMs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'gVCFs' field */
    public java.util.List<Gel_BioInf_Models.File> getGVCFs() {
      return gVCFs;
    }
    
    /** Sets the value of the 'gVCFs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setGVCFs(java.util.List<Gel_BioInf_Models.File> value) {
      validate(fields()[6], value);
      this.gVCFs = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'gVCFs' field has been set */
    public boolean hasGVCFs() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'gVCFs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearGVCFs() {
      gVCFs = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'VCFs' field */
    public java.util.List<Gel_BioInf_Models.File> getVCFs() {
      return VCFs;
    }
    
    /** Sets the value of the 'VCFs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setVCFs(java.util.List<Gel_BioInf_Models.File> value) {
      validate(fields()[7], value);
      this.VCFs = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'VCFs' field has been set */
    public boolean hasVCFs() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'VCFs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearVCFs() {
      VCFs = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'bigWigs' field */
    public java.util.List<Gel_BioInf_Models.File> getBigWigs() {
      return bigWigs;
    }
    
    /** Sets the value of the 'bigWigs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setBigWigs(java.util.List<Gel_BioInf_Models.File> value) {
      validate(fields()[8], value);
      this.bigWigs = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'bigWigs' field has been set */
    public boolean hasBigWigs() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'bigWigs' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearBigWigs() {
      bigWigs = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'pedigreeDiagram' field */
    public Gel_BioInf_Models.File getPedigreeDiagram() {
      return pedigreeDiagram;
    }
    
    /** Sets the value of the 'pedigreeDiagram' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setPedigreeDiagram(Gel_BioInf_Models.File value) {
      validate(fields()[9], value);
      this.pedigreeDiagram = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'pedigreeDiagram' field has been set */
    public boolean hasPedigreeDiagram() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'pedigreeDiagram' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearPedigreeDiagram() {
      pedigreeDiagram = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'annotationFile' field */
    public Gel_BioInf_Models.File getAnnotationFile() {
      return annotationFile;
    }
    
    /** Sets the value of the 'annotationFile' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setAnnotationFile(Gel_BioInf_Models.File value) {
      validate(fields()[10], value);
      this.annotationFile = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'annotationFile' field has been set */
    public boolean hasAnnotationFile() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'annotationFile' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearAnnotationFile() {
      annotationFile = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'pedigree' field */
    public Gel_BioInf_Models.Pedigree getPedigree() {
      return pedigree;
    }
    
    /** Sets the value of the 'pedigree' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setPedigree(Gel_BioInf_Models.Pedigree value) {
      validate(fields()[11], value);
      this.pedigree = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'pedigree' field has been set */
    public boolean hasPedigree() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'pedigree' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearPedigree() {
      pedigree = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'inbreedingCoefficientEstimates' field */
    public Gel_BioInf_Models.File getInbreedingCoefficientEstimates() {
      return inbreedingCoefficientEstimates;
    }
    
    /** Sets the value of the 'inbreedingCoefficientEstimates' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setInbreedingCoefficientEstimates(Gel_BioInf_Models.File value) {
      validate(fields()[12], value);
      this.inbreedingCoefficientEstimates = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'inbreedingCoefficientEstimates' field has been set */
    public boolean hasInbreedingCoefficientEstimates() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'inbreedingCoefficientEstimates' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearInbreedingCoefficientEstimates() {
      inbreedingCoefficientEstimates = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'complexGeneticPhenomena' field */
    public Gel_BioInf_Models.ComplexGeneticPhenomena getComplexGeneticPhenomena() {
      return complexGeneticPhenomena;
    }
    
    /** Sets the value of the 'complexGeneticPhenomena' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setComplexGeneticPhenomena(Gel_BioInf_Models.ComplexGeneticPhenomena value) {
      validate(fields()[13], value);
      this.complexGeneticPhenomena = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'complexGeneticPhenomena' field has been set */
    public boolean hasComplexGeneticPhenomena() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'complexGeneticPhenomena' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearComplexGeneticPhenomena() {
      complexGeneticPhenomena = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'modeOfInheritance' field */
    public Gel_BioInf_Models.ModeOfInheritance getModeOfInheritance() {
      return modeOfInheritance;
    }
    
    /** Sets the value of the 'modeOfInheritance' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setModeOfInheritance(Gel_BioInf_Models.ModeOfInheritance value) {
      validate(fields()[14], value);
      this.modeOfInheritance = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'modeOfInheritance' field has been set */
    public boolean hasModeOfInheritance() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'modeOfInheritance' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearModeOfInheritance() {
      modeOfInheritance = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'virtualPanel' field */
    public java.util.List<Gel_BioInf_Models.VirtualPanel> getVirtualPanel() {
      return virtualPanel;
    }
    
    /** Sets the value of the 'virtualPanel' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setVirtualPanel(java.util.List<Gel_BioInf_Models.VirtualPanel> value) {
      validate(fields()[15], value);
      this.virtualPanel = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'virtualPanel' field has been set */
    public boolean hasVirtualPanel() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'virtualPanel' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearVirtualPanel() {
      virtualPanel = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'otherFamilyHistory' field */
    public Gel_BioInf_Models.OtherFamilyHistory getOtherFamilyHistory() {
      return otherFamilyHistory;
    }
    
    /** Sets the value of the 'otherFamilyHistory' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setOtherFamilyHistory(Gel_BioInf_Models.OtherFamilyHistory value) {
      validate(fields()[16], value);
      this.otherFamilyHistory = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'otherFamilyHistory' field has been set */
    public boolean hasOtherFamilyHistory() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'otherFamilyHistory' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearOtherFamilyHistory() {
      otherFamilyHistory = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'analysisReturnURI' field */
    public java.lang.String getAnalysisReturnURI() {
      return analysisReturnURI;
    }
    
    /** Sets the value of the 'analysisReturnURI' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setAnalysisReturnURI(java.lang.String value) {
      validate(fields()[17], value);
      this.analysisReturnURI = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'analysisReturnURI' field has been set */
    public boolean hasAnalysisReturnURI() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'analysisReturnURI' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearAnalysisReturnURI() {
      analysisReturnURI = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'analysisVersion' field */
    public java.lang.String getAnalysisVersion() {
      return analysisVersion;
    }
    
    /** Sets the value of the 'analysisVersion' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setAnalysisVersion(java.lang.String value) {
      validate(fields()[18], value);
      this.analysisVersion = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'analysisVersion' field has been set */
    public boolean hasAnalysisVersion() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'analysisVersion' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearAnalysisVersion() {
      analysisVersion = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'additionalInfo' field */
    public java.util.Map<java.lang.String,java.lang.String> getAdditionalInfo() {
      return additionalInfo;
    }
    
    /** Sets the value of the 'additionalInfo' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder setAdditionalInfo(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[19], value);
      this.additionalInfo = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'additionalInfo' field has been set */
    public boolean hasAdditionalInfo() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'additionalInfo' field */
    public Gel_BioInf_Models.InterpretationRequestRD.Builder clearAdditionalInfo() {
      additionalInfo = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    public InterpretationRequestRD build() {
      try {
        InterpretationRequestRD record = new InterpretationRequestRD();
        record.InterpretationRequestID = fieldSetFlags()[0] ? this.InterpretationRequestID : (java.lang.String) defaultValue(fields()[0]);
        record.genomeAssemblyVersion = fieldSetFlags()[1] ? this.genomeAssemblyVersion : (java.lang.String) defaultValue(fields()[1]);
        record.InterpretationRequestVersion = fieldSetFlags()[2] ? this.InterpretationRequestVersion : (java.lang.Integer) defaultValue(fields()[2]);
        record.interpretGenome = fieldSetFlags()[3] ? this.interpretGenome : (java.lang.Boolean) defaultValue(fields()[3]);
        record.workspace = fieldSetFlags()[4] ? this.workspace : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        record.BAMs = fieldSetFlags()[5] ? this.BAMs : (java.util.List<Gel_BioInf_Models.File>) defaultValue(fields()[5]);
        record.gVCFs = fieldSetFlags()[6] ? this.gVCFs : (java.util.List<Gel_BioInf_Models.File>) defaultValue(fields()[6]);
        record.VCFs = fieldSetFlags()[7] ? this.VCFs : (java.util.List<Gel_BioInf_Models.File>) defaultValue(fields()[7]);
        record.bigWigs = fieldSetFlags()[8] ? this.bigWigs : (java.util.List<Gel_BioInf_Models.File>) defaultValue(fields()[8]);
        record.pedigreeDiagram = fieldSetFlags()[9] ? this.pedigreeDiagram : (Gel_BioInf_Models.File) defaultValue(fields()[9]);
        record.annotationFile = fieldSetFlags()[10] ? this.annotationFile : (Gel_BioInf_Models.File) defaultValue(fields()[10]);
        record.pedigree = fieldSetFlags()[11] ? this.pedigree : (Gel_BioInf_Models.Pedigree) defaultValue(fields()[11]);
        record.inbreedingCoefficientEstimates = fieldSetFlags()[12] ? this.inbreedingCoefficientEstimates : (Gel_BioInf_Models.File) defaultValue(fields()[12]);
        record.complexGeneticPhenomena = fieldSetFlags()[13] ? this.complexGeneticPhenomena : (Gel_BioInf_Models.ComplexGeneticPhenomena) defaultValue(fields()[13]);
        record.modeOfInheritance = fieldSetFlags()[14] ? this.modeOfInheritance : (Gel_BioInf_Models.ModeOfInheritance) defaultValue(fields()[14]);
        record.virtualPanel = fieldSetFlags()[15] ? this.virtualPanel : (java.util.List<Gel_BioInf_Models.VirtualPanel>) defaultValue(fields()[15]);
        record.otherFamilyHistory = fieldSetFlags()[16] ? this.otherFamilyHistory : (Gel_BioInf_Models.OtherFamilyHistory) defaultValue(fields()[16]);
        record.analysisReturnURI = fieldSetFlags()[17] ? this.analysisReturnURI : (java.lang.String) defaultValue(fields()[17]);
        record.analysisVersion = fieldSetFlags()[18] ? this.analysisVersion : (java.lang.String) defaultValue(fields()[18]);
        record.additionalInfo = fieldSetFlags()[19] ? this.additionalInfo : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[19]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
