/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Gel_BioInf_Models;  
@SuppressWarnings("all")
/** This defines a RD Participant (demographics and pedigree information) */
@org.apache.avro.specific.AvroGenerated
public class RDParticipant extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RDParticipant\",\"namespace\":\"Gel_BioInf_Models\",\"doc\":\"This defines a RD Participant (demographics and pedigree information)\",\"fields\":[{\"name\":\"pedigreeId\",\"type\":\"int\",\"doc\":\"Numbering used to refer to each member of the pedigree\"},{\"name\":\"isProband\",\"type\":\"boolean\",\"doc\":\"If this field is true, the member should be consider the proband of this family\"},{\"name\":\"gelId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"gel internal identifier, only required when the participant belongs to the program\"},{\"name\":\"gelFamilyId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Family id which internally translate to a sample set\"},{\"name\":\"sex\",\"type\":{\"type\":\"enum\",\"name\":\"Sex\",\"doc\":\"Sex\",\"symbols\":[\"male\",\"female\",\"undetermined\"]},\"doc\":\"Sex of the Participant\"},{\"name\":\"fatherId\",\"type\":[\"null\",\"int\"],\"doc\":\"refers to the pedigreeId of the father\\n    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known\\n    about them in order to unambiguously reconstruct the pedigree.\"},{\"name\":\"motherId\",\"type\":[\"null\",\"int\"],\"doc\":\"refers to the pedigreeId of the mother\\n    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known\\n    about them in order to unambiguously reconstruct the pedigree.\"},{\"name\":\"twinGroup\",\"type\":[\"null\",\"int\"],\"doc\":\"Each twin group is numbered, i.e. all members of a group of multiparous births receive the same number\"},{\"name\":\"monozygotic\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TernaryOption\",\"doc\":\"This the define a yes/no/unknown case\",\"symbols\":[\"yes\",\"no\",\"unknown\"]}],\"doc\":\"A property of the twinning group but should be entered for all members\"},{\"name\":\"adoptedStatus\",\"type\":{\"type\":\"enum\",\"name\":\"AdoptedStatus\",\"doc\":\"adoptedin means adopted into the family\\nadoptedout means child belonged to the family and was adopted out\",\"symbols\":[\"not_adopted\",\"adoptedin\",\"adoptedout\"]},\"doc\":\"Adopted Status\"},{\"name\":\"lifeStatus\",\"type\":{\"type\":\"enum\",\"name\":\"LifeStatus\",\"doc\":\"Life Status\",\"symbols\":[\"alive\",\"aborted\",\"deceased\",\"unborn\",\"stillborn\",\"miscarriage\"]},\"doc\":\"Life Status\"},{\"name\":\"consanguineousParents\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The parents of this participant has a consanguineous relationship\"},{\"name\":\"consanguineousPopulation\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Offspring from a consanguineous population\"},{\"name\":\"affectionStatus\",\"type\":{\"type\":\"enum\",\"name\":\"AffectionStatus\",\"doc\":\"Affection Status\",\"symbols\":[\"unaffected\",\"affected\",\"unknown\"]},\"doc\":\"Affection Status\"},{\"name\":\"disorderList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Disorder\",\"doc\":\"This is quite GEL specific. This is the way is stored in ModelCatalogue and PanelApp.\\nCurrently all specific disease titles are assigned to a disease subgroup so really only specificDisease needs to be\\ncompleted but we add the others for generality\",\"fields\":[{\"name\":\"diseaseGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This is Level2 Title for this disorder\"},{\"name\":\"diseaseSubGroup\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This is Level3 Title for this disorder\"},{\"name\":\"specificDisease\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This is Level4 Title for this disorder\"},{\"name\":\"ageOfOnset\",\"type\":[\"null\",\"int\"],\"doc\":\"Age of onset in months\"}]}},\"doc\":\"Clinical Data (disorders). If the family member is unaffected as per affectionStatus then this list is empty\"},{\"name\":\"hpoTermList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"HpoTerm\",\"doc\":\"This defines an HPO term and its modifiers (possibly multiple)\\nIf HPO term presence is unknown we don't have a entry on the list\",\"fields\":[{\"name\":\"term\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Identifier of the HPO term\"},{\"name\":\"termPresence\",\"type\":\"boolean\",\"doc\":\"This is whether the term is present in the participant (default is null=unkown) true=term is present in participant,\\n    false=term is not present\"},{\"name\":\"modifiers\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"Modifier associated with the HPO term\"},{\"name\":\"ageOfOnset\",\"type\":[\"null\",\"int\"],\"doc\":\"Age of onset in months\"}]}},\"doc\":\"Clinical Data (HPO terms)\"},{\"name\":\"ancestries\",\"type\":{\"type\":\"record\",\"name\":\"Ancestries\",\"fields\":[{\"name\":\"mothersEthnicOrigin\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"EthnicCategory\",\"doc\":\"This is the list of ethnics in ONS16\\n\\n* `D`:  Mixed: White and Black Caribbean\\n* `E`:  Mixed: White and Black African\\n* `F`:  Mixed: White and Asian\\n* `G`:  Mixed: Any other mixed background\\n* `A`:  White: British\\n* `B`:  White: Irish\\n* `C`:  White: Any other White background\\n* `L`:  Asian or Asian British: Any other Asian background\\n* `M`:  Black or Black British: Caribbean\\n* `N`:  Black or Black British: African\\n* `H`:  Asian or Asian British: Indian\\n* `J`:  Asian or Asian British: Pakistani\\n* `K`:  Asian or Asian British: Bangladeshi\\n* `P`:  Black or Black British: Any other Black background\\n* `S`:  Other Ethnic Groups: Any other ethnic group\\n* `R`:  Other Ethnic Groups: Chinese\\n* `Z`:  Not stated\",\"symbols\":[\"D\",\"E\",\"F\",\"G\",\"A\",\"B\",\"C\",\"L\",\"M\",\"N\",\"H\",\"J\",\"K\",\"P\",\"S\",\"R\",\"Z\"]}],\"doc\":\"Mother's Ethnic Origin\"},{\"name\":\"mothersOtherRelevantAncestry\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Mother's Ethnic Origin Description\"},{\"name\":\"fathersEthnicOrigin\",\"type\":[\"null\",\"EthnicCategory\"],\"doc\":\"Father's Ethnic Origin\"},{\"name\":\"fathersOtherRelevantAncestry\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Father's Ethnic Origin Description\"},{\"name\":\"chiSquare1KGenomesPhase3Pop\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ChiSquare1KGenomesPhase3Pop\",\"doc\":\"Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations\",\"fields\":[{\"name\":\"kGSuperPopCategory\",\"type\":{\"type\":\"enum\",\"name\":\"KGSuperPopCategory\",\"doc\":\"1K Population\",\"symbols\":[\"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\"]},\"doc\":\"1K Super Population\"},{\"name\":\"kGPopCategory\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"KGPopCategory\",\"doc\":\"1K Super Population\",\"symbols\":[\"ACB\",\"ASW\",\"BEB\",\"CDX\",\"CEU\",\"CHB\",\"CHS\",\"CLM\",\"ESN\",\"FIN\",\"GBR\",\"GIH\",\"GWD\",\"IBS\",\"ITU\",\"JPT\",\"KHV\",\"LWK\",\"MSL\",\"MXL\",\"PEL\",\"PJL\",\"PUR\",\"STU\",\"TSI\",\"YRI\"]}],\"doc\":\"1K Population\"},{\"name\":\"chiSquare\",\"type\":\"float\",\"doc\":\"Chi-square test for goodness of fit of this sample to this 1000 Genomes Phase 3 population\"}]}}],\"doc\":\"Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations\"}]},\"doc\":\"Participant's ancestries, defined as Mother's/Father's Ethnic Origin and Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations\"},{\"name\":\"dataModelCatalogueVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Version of the Data Catalogue against which the information is being provided\\n    The data catalogue version should internally keep track of the version for the HPO ontology\",\"default\":\"v4.2\"},{\"name\":\"consentStatus\",\"type\":{\"type\":\"record\",\"name\":\"ConsentStatus\",\"doc\":\"Consent Status\",\"fields\":[{\"name\":\"programmeConsent\",\"type\":\"boolean\",\"doc\":\"Is this individual consented to the programme?\\n    It could simple be a family member that is not consented but for whom affection status is known\",\"default\":false},{\"name\":\"primaryFindingConsent\",\"type\":\"boolean\",\"doc\":\"Consent for feedback of primary findings?\",\"default\":false},{\"name\":\"secondaryFindingConsent\",\"type\":\"boolean\",\"doc\":\"Consent for secondary finding lookup\",\"default\":false},{\"name\":\"carrierStatusConsent\",\"type\":\"boolean\",\"doc\":\"Consent for carrier status check?\",\"default\":false}]},\"doc\":\"What has this participant consented to?\\n    A participant that has been consented to the programme should also have sequence data associated with them; however\\n    this needs to be programmatically checked\"},{\"name\":\"samples\",\"type\":[\"null\",{\"ty","pe\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"This is an array containing all the samples that belong to this individual, e.g [\\\"LP00002255_GA4\\\"]\"},{\"name\":\"additionalInformation\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}],\"doc\":\"We could add a map here to store additional information for example URIs to images, ECGs, etc\\n    Null by default\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Numbering used to refer to each member of the pedigree */
   public int pedigreeId;
  /** If this field is true, the member should be consider the proband of this family */
   public boolean isProband;
  /** gel internal identifier, only required when the participant belongs to the program */
   public java.lang.String gelId;
  /** Family id which internally translate to a sample set */
   public java.lang.String gelFamilyId;
  /** Sex of the Participant */
   public Gel_BioInf_Models.Sex sex;
  /** refers to the pedigreeId of the father
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree. */
   public java.lang.Integer fatherId;
  /** refers to the pedigreeId of the mother
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree. */
   public java.lang.Integer motherId;
  /** Each twin group is numbered, i.e. all members of a group of multiparous births receive the same number */
   public java.lang.Integer twinGroup;
  /** A property of the twinning group but should be entered for all members */
   public Gel_BioInf_Models.TernaryOption monozygotic;
  /** Adopted Status */
   public Gel_BioInf_Models.AdoptedStatus adoptedStatus;
  /** Life Status */
   public Gel_BioInf_Models.LifeStatus lifeStatus;
  /** The parents of this participant has a consanguineous relationship */
   public java.lang.String consanguineousParents;
  /** Offspring from a consanguineous population */
   public java.lang.String consanguineousPopulation;
  /** Affection Status */
   public Gel_BioInf_Models.AffectionStatus affectionStatus;
  /** Clinical Data (disorders). If the family member is unaffected as per affectionStatus then this list is empty */
   public java.util.List<Gel_BioInf_Models.Disorder> disorderList;
  /** Clinical Data (HPO terms) */
   public java.util.List<Gel_BioInf_Models.HpoTerm> hpoTermList;
  /** Participant's ancestries, defined as Mother's/Father's Ethnic Origin and Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations */
   public Gel_BioInf_Models.Ancestries ancestries;
  /** Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology */
   public java.lang.String dataModelCatalogueVersion;
  /** What has this participant consented to?
    A participant that has been consented to the programme should also have sequence data associated with them; however
    this needs to be programmatically checked */
   public Gel_BioInf_Models.ConsentStatus consentStatus;
  /** This is an array containing all the samples that belong to this individual, e.g ["LP00002255_GA4"] */
   public java.util.List<java.lang.String> samples;
  /** We could add a map here to store additional information for example URIs to images, ECGs, etc
    Null by default */
   public java.util.Map<java.lang.String,java.lang.String> additionalInformation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RDParticipant() {}

  /**
   * All-args constructor.
   */
  public RDParticipant(java.lang.Integer pedigreeId, java.lang.Boolean isProband, java.lang.String gelId, java.lang.String gelFamilyId, Gel_BioInf_Models.Sex sex, java.lang.Integer fatherId, java.lang.Integer motherId, java.lang.Integer twinGroup, Gel_BioInf_Models.TernaryOption monozygotic, Gel_BioInf_Models.AdoptedStatus adoptedStatus, Gel_BioInf_Models.LifeStatus lifeStatus, java.lang.String consanguineousParents, java.lang.String consanguineousPopulation, Gel_BioInf_Models.AffectionStatus affectionStatus, java.util.List<Gel_BioInf_Models.Disorder> disorderList, java.util.List<Gel_BioInf_Models.HpoTerm> hpoTermList, Gel_BioInf_Models.Ancestries ancestries, java.lang.String dataModelCatalogueVersion, Gel_BioInf_Models.ConsentStatus consentStatus, java.util.List<java.lang.String> samples, java.util.Map<java.lang.String,java.lang.String> additionalInformation) {
    this.pedigreeId = pedigreeId;
    this.isProband = isProband;
    this.gelId = gelId;
    this.gelFamilyId = gelFamilyId;
    this.sex = sex;
    this.fatherId = fatherId;
    this.motherId = motherId;
    this.twinGroup = twinGroup;
    this.monozygotic = monozygotic;
    this.adoptedStatus = adoptedStatus;
    this.lifeStatus = lifeStatus;
    this.consanguineousParents = consanguineousParents;
    this.consanguineousPopulation = consanguineousPopulation;
    this.affectionStatus = affectionStatus;
    this.disorderList = disorderList;
    this.hpoTermList = hpoTermList;
    this.ancestries = ancestries;
    this.dataModelCatalogueVersion = dataModelCatalogueVersion;
    this.consentStatus = consentStatus;
    this.samples = samples;
    this.additionalInformation = additionalInformation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pedigreeId;
    case 1: return isProband;
    case 2: return gelId;
    case 3: return gelFamilyId;
    case 4: return sex;
    case 5: return fatherId;
    case 6: return motherId;
    case 7: return twinGroup;
    case 8: return monozygotic;
    case 9: return adoptedStatus;
    case 10: return lifeStatus;
    case 11: return consanguineousParents;
    case 12: return consanguineousPopulation;
    case 13: return affectionStatus;
    case 14: return disorderList;
    case 15: return hpoTermList;
    case 16: return ancestries;
    case 17: return dataModelCatalogueVersion;
    case 18: return consentStatus;
    case 19: return samples;
    case 20: return additionalInformation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pedigreeId = (java.lang.Integer)value$; break;
    case 1: isProband = (java.lang.Boolean)value$; break;
    case 2: gelId = (java.lang.String)value$; break;
    case 3: gelFamilyId = (java.lang.String)value$; break;
    case 4: sex = (Gel_BioInf_Models.Sex)value$; break;
    case 5: fatherId = (java.lang.Integer)value$; break;
    case 6: motherId = (java.lang.Integer)value$; break;
    case 7: twinGroup = (java.lang.Integer)value$; break;
    case 8: monozygotic = (Gel_BioInf_Models.TernaryOption)value$; break;
    case 9: adoptedStatus = (Gel_BioInf_Models.AdoptedStatus)value$; break;
    case 10: lifeStatus = (Gel_BioInf_Models.LifeStatus)value$; break;
    case 11: consanguineousParents = (java.lang.String)value$; break;
    case 12: consanguineousPopulation = (java.lang.String)value$; break;
    case 13: affectionStatus = (Gel_BioInf_Models.AffectionStatus)value$; break;
    case 14: disorderList = (java.util.List<Gel_BioInf_Models.Disorder>)value$; break;
    case 15: hpoTermList = (java.util.List<Gel_BioInf_Models.HpoTerm>)value$; break;
    case 16: ancestries = (Gel_BioInf_Models.Ancestries)value$; break;
    case 17: dataModelCatalogueVersion = (java.lang.String)value$; break;
    case 18: consentStatus = (Gel_BioInf_Models.ConsentStatus)value$; break;
    case 19: samples = (java.util.List<java.lang.String>)value$; break;
    case 20: additionalInformation = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pedigreeId' field.
   * Numbering used to refer to each member of the pedigree   */
  public java.lang.Integer getPedigreeId() {
    return pedigreeId;
  }

  /**
   * Sets the value of the 'pedigreeId' field.
   * Numbering used to refer to each member of the pedigree   * @param value the value to set.
   */
  public void setPedigreeId(java.lang.Integer value) {
    this.pedigreeId = value;
  }

  /**
   * Gets the value of the 'isProband' field.
   * If this field is true, the member should be consider the proband of this family   */
  public java.lang.Boolean getIsProband() {
    return isProband;
  }

  /**
   * Sets the value of the 'isProband' field.
   * If this field is true, the member should be consider the proband of this family   * @param value the value to set.
   */
  public void setIsProband(java.lang.Boolean value) {
    this.isProband = value;
  }

  /**
   * Gets the value of the 'gelId' field.
   * gel internal identifier, only required when the participant belongs to the program   */
  public java.lang.String getGelId() {
    return gelId;
  }

  /**
   * Sets the value of the 'gelId' field.
   * gel internal identifier, only required when the participant belongs to the program   * @param value the value to set.
   */
  public void setGelId(java.lang.String value) {
    this.gelId = value;
  }

  /**
   * Gets the value of the 'gelFamilyId' field.
   * Family id which internally translate to a sample set   */
  public java.lang.String getGelFamilyId() {
    return gelFamilyId;
  }

  /**
   * Sets the value of the 'gelFamilyId' field.
   * Family id which internally translate to a sample set   * @param value the value to set.
   */
  public void setGelFamilyId(java.lang.String value) {
    this.gelFamilyId = value;
  }

  /**
   * Gets the value of the 'sex' field.
   * Sex of the Participant   */
  public Gel_BioInf_Models.Sex getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * Sex of the Participant   * @param value the value to set.
   */
  public void setSex(Gel_BioInf_Models.Sex value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'fatherId' field.
   * refers to the pedigreeId of the father
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree.   */
  public java.lang.Integer getFatherId() {
    return fatherId;
  }

  /**
   * Sets the value of the 'fatherId' field.
   * refers to the pedigreeId of the father
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree.   * @param value the value to set.
   */
  public void setFatherId(java.lang.Integer value) {
    this.fatherId = value;
  }

  /**
   * Gets the value of the 'motherId' field.
   * refers to the pedigreeId of the mother
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree.   */
  public java.lang.Integer getMotherId() {
    return motherId;
  }

  /**
   * Sets the value of the 'motherId' field.
   * refers to the pedigreeId of the mother
    Id of the parent, if unknown then no parent is referenced. Parents may need to be entered even if no data is known
    about them in order to unambiguously reconstruct the pedigree.   * @param value the value to set.
   */
  public void setMotherId(java.lang.Integer value) {
    this.motherId = value;
  }

  /**
   * Gets the value of the 'twinGroup' field.
   * Each twin group is numbered, i.e. all members of a group of multiparous births receive the same number   */
  public java.lang.Integer getTwinGroup() {
    return twinGroup;
  }

  /**
   * Sets the value of the 'twinGroup' field.
   * Each twin group is numbered, i.e. all members of a group of multiparous births receive the same number   * @param value the value to set.
   */
  public void setTwinGroup(java.lang.Integer value) {
    this.twinGroup = value;
  }

  /**
   * Gets the value of the 'monozygotic' field.
   * A property of the twinning group but should be entered for all members   */
  public Gel_BioInf_Models.TernaryOption getMonozygotic() {
    return monozygotic;
  }

  /**
   * Sets the value of the 'monozygotic' field.
   * A property of the twinning group but should be entered for all members   * @param value the value to set.
   */
  public void setMonozygotic(Gel_BioInf_Models.TernaryOption value) {
    this.monozygotic = value;
  }

  /**
   * Gets the value of the 'adoptedStatus' field.
   * Adopted Status   */
  public Gel_BioInf_Models.AdoptedStatus getAdoptedStatus() {
    return adoptedStatus;
  }

  /**
   * Sets the value of the 'adoptedStatus' field.
   * Adopted Status   * @param value the value to set.
   */
  public void setAdoptedStatus(Gel_BioInf_Models.AdoptedStatus value) {
    this.adoptedStatus = value;
  }

  /**
   * Gets the value of the 'lifeStatus' field.
   * Life Status   */
  public Gel_BioInf_Models.LifeStatus getLifeStatus() {
    return lifeStatus;
  }

  /**
   * Sets the value of the 'lifeStatus' field.
   * Life Status   * @param value the value to set.
   */
  public void setLifeStatus(Gel_BioInf_Models.LifeStatus value) {
    this.lifeStatus = value;
  }

  /**
   * Gets the value of the 'consanguineousParents' field.
   * The parents of this participant has a consanguineous relationship   */
  public java.lang.String getConsanguineousParents() {
    return consanguineousParents;
  }

  /**
   * Sets the value of the 'consanguineousParents' field.
   * The parents of this participant has a consanguineous relationship   * @param value the value to set.
   */
  public void setConsanguineousParents(java.lang.String value) {
    this.consanguineousParents = value;
  }

  /**
   * Gets the value of the 'consanguineousPopulation' field.
   * Offspring from a consanguineous population   */
  public java.lang.String getConsanguineousPopulation() {
    return consanguineousPopulation;
  }

  /**
   * Sets the value of the 'consanguineousPopulation' field.
   * Offspring from a consanguineous population   * @param value the value to set.
   */
  public void setConsanguineousPopulation(java.lang.String value) {
    this.consanguineousPopulation = value;
  }

  /**
   * Gets the value of the 'affectionStatus' field.
   * Affection Status   */
  public Gel_BioInf_Models.AffectionStatus getAffectionStatus() {
    return affectionStatus;
  }

  /**
   * Sets the value of the 'affectionStatus' field.
   * Affection Status   * @param value the value to set.
   */
  public void setAffectionStatus(Gel_BioInf_Models.AffectionStatus value) {
    this.affectionStatus = value;
  }

  /**
   * Gets the value of the 'disorderList' field.
   * Clinical Data (disorders). If the family member is unaffected as per affectionStatus then this list is empty   */
  public java.util.List<Gel_BioInf_Models.Disorder> getDisorderList() {
    return disorderList;
  }

  /**
   * Sets the value of the 'disorderList' field.
   * Clinical Data (disorders). If the family member is unaffected as per affectionStatus then this list is empty   * @param value the value to set.
   */
  public void setDisorderList(java.util.List<Gel_BioInf_Models.Disorder> value) {
    this.disorderList = value;
  }

  /**
   * Gets the value of the 'hpoTermList' field.
   * Clinical Data (HPO terms)   */
  public java.util.List<Gel_BioInf_Models.HpoTerm> getHpoTermList() {
    return hpoTermList;
  }

  /**
   * Sets the value of the 'hpoTermList' field.
   * Clinical Data (HPO terms)   * @param value the value to set.
   */
  public void setHpoTermList(java.util.List<Gel_BioInf_Models.HpoTerm> value) {
    this.hpoTermList = value;
  }

  /**
   * Gets the value of the 'ancestries' field.
   * Participant's ancestries, defined as Mother's/Father's Ethnic Origin and Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations   */
  public Gel_BioInf_Models.Ancestries getAncestries() {
    return ancestries;
  }

  /**
   * Sets the value of the 'ancestries' field.
   * Participant's ancestries, defined as Mother's/Father's Ethnic Origin and Chi-square test for goodness of fit of this sample to 1000 Genomes Phase 3 populations   * @param value the value to set.
   */
  public void setAncestries(Gel_BioInf_Models.Ancestries value) {
    this.ancestries = value;
  }

  /**
   * Gets the value of the 'dataModelCatalogueVersion' field.
   * Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology   */
  public java.lang.String getDataModelCatalogueVersion() {
    return dataModelCatalogueVersion;
  }

  /**
   * Sets the value of the 'dataModelCatalogueVersion' field.
   * Version of the Data Catalogue against which the information is being provided
    The data catalogue version should internally keep track of the version for the HPO ontology   * @param value the value to set.
   */
  public void setDataModelCatalogueVersion(java.lang.String value) {
    this.dataModelCatalogueVersion = value;
  }

  /**
   * Gets the value of the 'consentStatus' field.
   * What has this participant consented to?
    A participant that has been consented to the programme should also have sequence data associated with them; however
    this needs to be programmatically checked   */
  public Gel_BioInf_Models.ConsentStatus getConsentStatus() {
    return consentStatus;
  }

  /**
   * Sets the value of the 'consentStatus' field.
   * What has this participant consented to?
    A participant that has been consented to the programme should also have sequence data associated with them; however
    this needs to be programmatically checked   * @param value the value to set.
   */
  public void setConsentStatus(Gel_BioInf_Models.ConsentStatus value) {
    this.consentStatus = value;
  }

  /**
   * Gets the value of the 'samples' field.
   * This is an array containing all the samples that belong to this individual, e.g ["LP00002255_GA4"]   */
  public java.util.List<java.lang.String> getSamples() {
    return samples;
  }

  /**
   * Sets the value of the 'samples' field.
   * This is an array containing all the samples that belong to this individual, e.g ["LP00002255_GA4"]   * @param value the value to set.
   */
  public void setSamples(java.util.List<java.lang.String> value) {
    this.samples = value;
  }

  /**
   * Gets the value of the 'additionalInformation' field.
   * We could add a map here to store additional information for example URIs to images, ECGs, etc
    Null by default   */
  public java.util.Map<java.lang.String,java.lang.String> getAdditionalInformation() {
    return additionalInformation;
  }

  /**
   * Sets the value of the 'additionalInformation' field.
   * We could add a map here to store additional information for example URIs to images, ECGs, etc
    Null by default   * @param value the value to set.
   */
  public void setAdditionalInformation(java.util.Map<java.lang.String,java.lang.String> value) {
    this.additionalInformation = value;
  }

  /** Creates a new RDParticipant RecordBuilder */
  public static Gel_BioInf_Models.RDParticipant.Builder newBuilder() {
    return new Gel_BioInf_Models.RDParticipant.Builder();
  }
  
  /** Creates a new RDParticipant RecordBuilder by copying an existing Builder */
  public static Gel_BioInf_Models.RDParticipant.Builder newBuilder(Gel_BioInf_Models.RDParticipant.Builder other) {
    return new Gel_BioInf_Models.RDParticipant.Builder(other);
  }
  
  /** Creates a new RDParticipant RecordBuilder by copying an existing RDParticipant instance */
  public static Gel_BioInf_Models.RDParticipant.Builder newBuilder(Gel_BioInf_Models.RDParticipant other) {
    return new Gel_BioInf_Models.RDParticipant.Builder(other);
  }
  
  /**
   * RecordBuilder for RDParticipant instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RDParticipant>
    implements org.apache.avro.data.RecordBuilder<RDParticipant> {

    private int pedigreeId;
    private boolean isProband;
    private java.lang.String gelId;
    private java.lang.String gelFamilyId;
    private Gel_BioInf_Models.Sex sex;
    private java.lang.Integer fatherId;
    private java.lang.Integer motherId;
    private java.lang.Integer twinGroup;
    private Gel_BioInf_Models.TernaryOption monozygotic;
    private Gel_BioInf_Models.AdoptedStatus adoptedStatus;
    private Gel_BioInf_Models.LifeStatus lifeStatus;
    private java.lang.String consanguineousParents;
    private java.lang.String consanguineousPopulation;
    private Gel_BioInf_Models.AffectionStatus affectionStatus;
    private java.util.List<Gel_BioInf_Models.Disorder> disorderList;
    private java.util.List<Gel_BioInf_Models.HpoTerm> hpoTermList;
    private Gel_BioInf_Models.Ancestries ancestries;
    private java.lang.String dataModelCatalogueVersion;
    private Gel_BioInf_Models.ConsentStatus consentStatus;
    private java.util.List<java.lang.String> samples;
    private java.util.Map<java.lang.String,java.lang.String> additionalInformation;

    /** Creates a new Builder */
    private Builder() {
      super(Gel_BioInf_Models.RDParticipant.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Gel_BioInf_Models.RDParticipant.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pedigreeId)) {
        this.pedigreeId = data().deepCopy(fields()[0].schema(), other.pedigreeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isProband)) {
        this.isProband = data().deepCopy(fields()[1].schema(), other.isProband);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gelId)) {
        this.gelId = data().deepCopy(fields()[2].schema(), other.gelId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gelFamilyId)) {
        this.gelFamilyId = data().deepCopy(fields()[3].schema(), other.gelFamilyId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sex)) {
        this.sex = data().deepCopy(fields()[4].schema(), other.sex);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fatherId)) {
        this.fatherId = data().deepCopy(fields()[5].schema(), other.fatherId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.motherId)) {
        this.motherId = data().deepCopy(fields()[6].schema(), other.motherId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.twinGroup)) {
        this.twinGroup = data().deepCopy(fields()[7].schema(), other.twinGroup);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.monozygotic)) {
        this.monozygotic = data().deepCopy(fields()[8].schema(), other.monozygotic);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.adoptedStatus)) {
        this.adoptedStatus = data().deepCopy(fields()[9].schema(), other.adoptedStatus);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lifeStatus)) {
        this.lifeStatus = data().deepCopy(fields()[10].schema(), other.lifeStatus);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.consanguineousParents)) {
        this.consanguineousParents = data().deepCopy(fields()[11].schema(), other.consanguineousParents);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.consanguineousPopulation)) {
        this.consanguineousPopulation = data().deepCopy(fields()[12].schema(), other.consanguineousPopulation);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.affectionStatus)) {
        this.affectionStatus = data().deepCopy(fields()[13].schema(), other.affectionStatus);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.disorderList)) {
        this.disorderList = data().deepCopy(fields()[14].schema(), other.disorderList);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.hpoTermList)) {
        this.hpoTermList = data().deepCopy(fields()[15].schema(), other.hpoTermList);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.ancestries)) {
        this.ancestries = data().deepCopy(fields()[16].schema(), other.ancestries);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.dataModelCatalogueVersion)) {
        this.dataModelCatalogueVersion = data().deepCopy(fields()[17].schema(), other.dataModelCatalogueVersion);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.consentStatus)) {
        this.consentStatus = data().deepCopy(fields()[18].schema(), other.consentStatus);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.samples)) {
        this.samples = data().deepCopy(fields()[19].schema(), other.samples);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.additionalInformation)) {
        this.additionalInformation = data().deepCopy(fields()[20].schema(), other.additionalInformation);
        fieldSetFlags()[20] = true;
      }
    }
    
    /** Creates a Builder by copying an existing RDParticipant instance */
    private Builder(Gel_BioInf_Models.RDParticipant other) {
            super(Gel_BioInf_Models.RDParticipant.SCHEMA$);
      if (isValidValue(fields()[0], other.pedigreeId)) {
        this.pedigreeId = data().deepCopy(fields()[0].schema(), other.pedigreeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isProband)) {
        this.isProband = data().deepCopy(fields()[1].schema(), other.isProband);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gelId)) {
        this.gelId = data().deepCopy(fields()[2].schema(), other.gelId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gelFamilyId)) {
        this.gelFamilyId = data().deepCopy(fields()[3].schema(), other.gelFamilyId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sex)) {
        this.sex = data().deepCopy(fields()[4].schema(), other.sex);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.fatherId)) {
        this.fatherId = data().deepCopy(fields()[5].schema(), other.fatherId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.motherId)) {
        this.motherId = data().deepCopy(fields()[6].schema(), other.motherId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.twinGroup)) {
        this.twinGroup = data().deepCopy(fields()[7].schema(), other.twinGroup);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.monozygotic)) {
        this.monozygotic = data().deepCopy(fields()[8].schema(), other.monozygotic);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.adoptedStatus)) {
        this.adoptedStatus = data().deepCopy(fields()[9].schema(), other.adoptedStatus);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lifeStatus)) {
        this.lifeStatus = data().deepCopy(fields()[10].schema(), other.lifeStatus);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.consanguineousParents)) {
        this.consanguineousParents = data().deepCopy(fields()[11].schema(), other.consanguineousParents);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.consanguineousPopulation)) {
        this.consanguineousPopulation = data().deepCopy(fields()[12].schema(), other.consanguineousPopulation);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.affectionStatus)) {
        this.affectionStatus = data().deepCopy(fields()[13].schema(), other.affectionStatus);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.disorderList)) {
        this.disorderList = data().deepCopy(fields()[14].schema(), other.disorderList);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.hpoTermList)) {
        this.hpoTermList = data().deepCopy(fields()[15].schema(), other.hpoTermList);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.ancestries)) {
        this.ancestries = data().deepCopy(fields()[16].schema(), other.ancestries);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.dataModelCatalogueVersion)) {
        this.dataModelCatalogueVersion = data().deepCopy(fields()[17].schema(), other.dataModelCatalogueVersion);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.consentStatus)) {
        this.consentStatus = data().deepCopy(fields()[18].schema(), other.consentStatus);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.samples)) {
        this.samples = data().deepCopy(fields()[19].schema(), other.samples);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.additionalInformation)) {
        this.additionalInformation = data().deepCopy(fields()[20].schema(), other.additionalInformation);
        fieldSetFlags()[20] = true;
      }
    }

    /** Gets the value of the 'pedigreeId' field */
    public java.lang.Integer getPedigreeId() {
      return pedigreeId;
    }
    
    /** Sets the value of the 'pedigreeId' field */
    public Gel_BioInf_Models.RDParticipant.Builder setPedigreeId(int value) {
      validate(fields()[0], value);
      this.pedigreeId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pedigreeId' field has been set */
    public boolean hasPedigreeId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pedigreeId' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearPedigreeId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'isProband' field */
    public java.lang.Boolean getIsProband() {
      return isProband;
    }
    
    /** Sets the value of the 'isProband' field */
    public Gel_BioInf_Models.RDParticipant.Builder setIsProband(boolean value) {
      validate(fields()[1], value);
      this.isProband = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'isProband' field has been set */
    public boolean hasIsProband() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'isProband' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearIsProband() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'gelId' field */
    public java.lang.String getGelId() {
      return gelId;
    }
    
    /** Sets the value of the 'gelId' field */
    public Gel_BioInf_Models.RDParticipant.Builder setGelId(java.lang.String value) {
      validate(fields()[2], value);
      this.gelId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'gelId' field has been set */
    public boolean hasGelId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'gelId' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearGelId() {
      gelId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'gelFamilyId' field */
    public java.lang.String getGelFamilyId() {
      return gelFamilyId;
    }
    
    /** Sets the value of the 'gelFamilyId' field */
    public Gel_BioInf_Models.RDParticipant.Builder setGelFamilyId(java.lang.String value) {
      validate(fields()[3], value);
      this.gelFamilyId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'gelFamilyId' field has been set */
    public boolean hasGelFamilyId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'gelFamilyId' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearGelFamilyId() {
      gelFamilyId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'sex' field */
    public Gel_BioInf_Models.Sex getSex() {
      return sex;
    }
    
    /** Sets the value of the 'sex' field */
    public Gel_BioInf_Models.RDParticipant.Builder setSex(Gel_BioInf_Models.Sex value) {
      validate(fields()[4], value);
      this.sex = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sex' field has been set */
    public boolean hasSex() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sex' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearSex() {
      sex = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'fatherId' field */
    public java.lang.Integer getFatherId() {
      return fatherId;
    }
    
    /** Sets the value of the 'fatherId' field */
    public Gel_BioInf_Models.RDParticipant.Builder setFatherId(java.lang.Integer value) {
      validate(fields()[5], value);
      this.fatherId = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'fatherId' field has been set */
    public boolean hasFatherId() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'fatherId' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearFatherId() {
      fatherId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'motherId' field */
    public java.lang.Integer getMotherId() {
      return motherId;
    }
    
    /** Sets the value of the 'motherId' field */
    public Gel_BioInf_Models.RDParticipant.Builder setMotherId(java.lang.Integer value) {
      validate(fields()[6], value);
      this.motherId = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'motherId' field has been set */
    public boolean hasMotherId() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'motherId' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearMotherId() {
      motherId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'twinGroup' field */
    public java.lang.Integer getTwinGroup() {
      return twinGroup;
    }
    
    /** Sets the value of the 'twinGroup' field */
    public Gel_BioInf_Models.RDParticipant.Builder setTwinGroup(java.lang.Integer value) {
      validate(fields()[7], value);
      this.twinGroup = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'twinGroup' field has been set */
    public boolean hasTwinGroup() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'twinGroup' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearTwinGroup() {
      twinGroup = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'monozygotic' field */
    public Gel_BioInf_Models.TernaryOption getMonozygotic() {
      return monozygotic;
    }
    
    /** Sets the value of the 'monozygotic' field */
    public Gel_BioInf_Models.RDParticipant.Builder setMonozygotic(Gel_BioInf_Models.TernaryOption value) {
      validate(fields()[8], value);
      this.monozygotic = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'monozygotic' field has been set */
    public boolean hasMonozygotic() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'monozygotic' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearMonozygotic() {
      monozygotic = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'adoptedStatus' field */
    public Gel_BioInf_Models.AdoptedStatus getAdoptedStatus() {
      return adoptedStatus;
    }
    
    /** Sets the value of the 'adoptedStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder setAdoptedStatus(Gel_BioInf_Models.AdoptedStatus value) {
      validate(fields()[9], value);
      this.adoptedStatus = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'adoptedStatus' field has been set */
    public boolean hasAdoptedStatus() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'adoptedStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearAdoptedStatus() {
      adoptedStatus = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'lifeStatus' field */
    public Gel_BioInf_Models.LifeStatus getLifeStatus() {
      return lifeStatus;
    }
    
    /** Sets the value of the 'lifeStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder setLifeStatus(Gel_BioInf_Models.LifeStatus value) {
      validate(fields()[10], value);
      this.lifeStatus = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'lifeStatus' field has been set */
    public boolean hasLifeStatus() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'lifeStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearLifeStatus() {
      lifeStatus = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'consanguineousParents' field */
    public java.lang.String getConsanguineousParents() {
      return consanguineousParents;
    }
    
    /** Sets the value of the 'consanguineousParents' field */
    public Gel_BioInf_Models.RDParticipant.Builder setConsanguineousParents(java.lang.String value) {
      validate(fields()[11], value);
      this.consanguineousParents = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'consanguineousParents' field has been set */
    public boolean hasConsanguineousParents() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'consanguineousParents' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearConsanguineousParents() {
      consanguineousParents = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'consanguineousPopulation' field */
    public java.lang.String getConsanguineousPopulation() {
      return consanguineousPopulation;
    }
    
    /** Sets the value of the 'consanguineousPopulation' field */
    public Gel_BioInf_Models.RDParticipant.Builder setConsanguineousPopulation(java.lang.String value) {
      validate(fields()[12], value);
      this.consanguineousPopulation = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'consanguineousPopulation' field has been set */
    public boolean hasConsanguineousPopulation() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'consanguineousPopulation' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearConsanguineousPopulation() {
      consanguineousPopulation = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'affectionStatus' field */
    public Gel_BioInf_Models.AffectionStatus getAffectionStatus() {
      return affectionStatus;
    }
    
    /** Sets the value of the 'affectionStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder setAffectionStatus(Gel_BioInf_Models.AffectionStatus value) {
      validate(fields()[13], value);
      this.affectionStatus = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'affectionStatus' field has been set */
    public boolean hasAffectionStatus() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'affectionStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearAffectionStatus() {
      affectionStatus = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'disorderList' field */
    public java.util.List<Gel_BioInf_Models.Disorder> getDisorderList() {
      return disorderList;
    }
    
    /** Sets the value of the 'disorderList' field */
    public Gel_BioInf_Models.RDParticipant.Builder setDisorderList(java.util.List<Gel_BioInf_Models.Disorder> value) {
      validate(fields()[14], value);
      this.disorderList = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'disorderList' field has been set */
    public boolean hasDisorderList() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'disorderList' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearDisorderList() {
      disorderList = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'hpoTermList' field */
    public java.util.List<Gel_BioInf_Models.HpoTerm> getHpoTermList() {
      return hpoTermList;
    }
    
    /** Sets the value of the 'hpoTermList' field */
    public Gel_BioInf_Models.RDParticipant.Builder setHpoTermList(java.util.List<Gel_BioInf_Models.HpoTerm> value) {
      validate(fields()[15], value);
      this.hpoTermList = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'hpoTermList' field has been set */
    public boolean hasHpoTermList() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'hpoTermList' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearHpoTermList() {
      hpoTermList = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'ancestries' field */
    public Gel_BioInf_Models.Ancestries getAncestries() {
      return ancestries;
    }
    
    /** Sets the value of the 'ancestries' field */
    public Gel_BioInf_Models.RDParticipant.Builder setAncestries(Gel_BioInf_Models.Ancestries value) {
      validate(fields()[16], value);
      this.ancestries = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'ancestries' field has been set */
    public boolean hasAncestries() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'ancestries' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearAncestries() {
      ancestries = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'dataModelCatalogueVersion' field */
    public java.lang.String getDataModelCatalogueVersion() {
      return dataModelCatalogueVersion;
    }
    
    /** Sets the value of the 'dataModelCatalogueVersion' field */
    public Gel_BioInf_Models.RDParticipant.Builder setDataModelCatalogueVersion(java.lang.String value) {
      validate(fields()[17], value);
      this.dataModelCatalogueVersion = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'dataModelCatalogueVersion' field has been set */
    public boolean hasDataModelCatalogueVersion() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'dataModelCatalogueVersion' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearDataModelCatalogueVersion() {
      dataModelCatalogueVersion = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'consentStatus' field */
    public Gel_BioInf_Models.ConsentStatus getConsentStatus() {
      return consentStatus;
    }
    
    /** Sets the value of the 'consentStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder setConsentStatus(Gel_BioInf_Models.ConsentStatus value) {
      validate(fields()[18], value);
      this.consentStatus = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'consentStatus' field has been set */
    public boolean hasConsentStatus() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'consentStatus' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearConsentStatus() {
      consentStatus = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'samples' field */
    public java.util.List<java.lang.String> getSamples() {
      return samples;
    }
    
    /** Sets the value of the 'samples' field */
    public Gel_BioInf_Models.RDParticipant.Builder setSamples(java.util.List<java.lang.String> value) {
      validate(fields()[19], value);
      this.samples = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'samples' field has been set */
    public boolean hasSamples() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'samples' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearSamples() {
      samples = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'additionalInformation' field */
    public java.util.Map<java.lang.String,java.lang.String> getAdditionalInformation() {
      return additionalInformation;
    }
    
    /** Sets the value of the 'additionalInformation' field */
    public Gel_BioInf_Models.RDParticipant.Builder setAdditionalInformation(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[20], value);
      this.additionalInformation = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'additionalInformation' field has been set */
    public boolean hasAdditionalInformation() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'additionalInformation' field */
    public Gel_BioInf_Models.RDParticipant.Builder clearAdditionalInformation() {
      additionalInformation = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    public RDParticipant build() {
      try {
        RDParticipant record = new RDParticipant();
        record.pedigreeId = fieldSetFlags()[0] ? this.pedigreeId : (java.lang.Integer) defaultValue(fields()[0]);
        record.isProband = fieldSetFlags()[1] ? this.isProband : (java.lang.Boolean) defaultValue(fields()[1]);
        record.gelId = fieldSetFlags()[2] ? this.gelId : (java.lang.String) defaultValue(fields()[2]);
        record.gelFamilyId = fieldSetFlags()[3] ? this.gelFamilyId : (java.lang.String) defaultValue(fields()[3]);
        record.sex = fieldSetFlags()[4] ? this.sex : (Gel_BioInf_Models.Sex) defaultValue(fields()[4]);
        record.fatherId = fieldSetFlags()[5] ? this.fatherId : (java.lang.Integer) defaultValue(fields()[5]);
        record.motherId = fieldSetFlags()[6] ? this.motherId : (java.lang.Integer) defaultValue(fields()[6]);
        record.twinGroup = fieldSetFlags()[7] ? this.twinGroup : (java.lang.Integer) defaultValue(fields()[7]);
        record.monozygotic = fieldSetFlags()[8] ? this.monozygotic : (Gel_BioInf_Models.TernaryOption) defaultValue(fields()[8]);
        record.adoptedStatus = fieldSetFlags()[9] ? this.adoptedStatus : (Gel_BioInf_Models.AdoptedStatus) defaultValue(fields()[9]);
        record.lifeStatus = fieldSetFlags()[10] ? this.lifeStatus : (Gel_BioInf_Models.LifeStatus) defaultValue(fields()[10]);
        record.consanguineousParents = fieldSetFlags()[11] ? this.consanguineousParents : (java.lang.String) defaultValue(fields()[11]);
        record.consanguineousPopulation = fieldSetFlags()[12] ? this.consanguineousPopulation : (java.lang.String) defaultValue(fields()[12]);
        record.affectionStatus = fieldSetFlags()[13] ? this.affectionStatus : (Gel_BioInf_Models.AffectionStatus) defaultValue(fields()[13]);
        record.disorderList = fieldSetFlags()[14] ? this.disorderList : (java.util.List<Gel_BioInf_Models.Disorder>) defaultValue(fields()[14]);
        record.hpoTermList = fieldSetFlags()[15] ? this.hpoTermList : (java.util.List<Gel_BioInf_Models.HpoTerm>) defaultValue(fields()[15]);
        record.ancestries = fieldSetFlags()[16] ? this.ancestries : (Gel_BioInf_Models.Ancestries) defaultValue(fields()[16]);
        record.dataModelCatalogueVersion = fieldSetFlags()[17] ? this.dataModelCatalogueVersion : (java.lang.String) defaultValue(fields()[17]);
        record.consentStatus = fieldSetFlags()[18] ? this.consentStatus : (Gel_BioInf_Models.ConsentStatus) defaultValue(fields()[18]);
        record.samples = fieldSetFlags()[19] ? this.samples : (java.util.List<java.lang.String>) defaultValue(fields()[19]);
        record.additionalInformation = fieldSetFlags()[20] ? this.additionalInformation : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[20]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
